[
{
	"uri": "/en/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "  Basic Steps Install R and RStudio on your computer by visiting the Surrey App Store and logging in using your university account details. You may find additional information on how to install R and RStudio on your personal computer on SurreyLearn.\nWhen you start RStudio for the first time you will see three panes:\nThe above image shows the RStudio launch interface\n Now let’s see what each one these windows is doing. You can type some code in the Console window and when you press ENTER the software will run (execute) that code. Typically, you will see some output in the Console, as the results from your analysis, but sometimes you might also get a warning message or an error message. Don’t worry if you get an error message (typically they appear in red colour) , nothing will happen!\n "
},
{
	"uri": "/en/introduction/console/",
	"title": "The Console",
	"tags": [],
	"description": "",
	"content": "Basic mathematical operations Let\u0026rsquo;s get familiar with the Console by calculating some simple in RStudio. In it\u0026rsquo;s simplest form R can be used as very powerful calculator.\n5+5 Now let\u0026rsquo;s try to do the same by using some mathematical operations such as subtraction ( - ), division ( / ), and multiplication ( * ).\nSubtraction\n5-3 Division\n10/6 Multiplication\n7*5 You can edit your code in the console by using the arrow keys on your keyboard. The UP and DOWN keys will re-run your code without typing it again. You may edit your code by using the LEFT and/or the RIGHT keys\n"
},
{
	"uri": "/en/descriptive_statistics/find.data/",
	"title": "Where to find data",
	"tags": [],
	"description": "",
	"content": "When we are starting a new research project, quite often we assume that we need to collect data. However, this is not always required as there are many good quality datasets that are readily available for use. Most surveys are designed by very experienced researchers and cover a wide range of topics.\nFor example, GESIS-Leibniz Institute of the Social Sciences,houses almost all comparative and German social surveys in Europe. Almost all European countries have a data archive. In the UK we have the UK Data Archive, the UKDA is the national data archive. Additionally, the World Bank and Eurostat, the statistical office of the European Union, provide a wide range of statistics, such as the GDP per Capita, inflation, unemployment, etc.\nTo download data you need to register first, this is easy to do, you only need an email address. Once you register you may download any dataset you are interested in, for free.\nIn our module we will use the European Value Study (EVS). EVS, provides insights into the ideas, beliefs, preferences, attitudes, values and opinions of citizens all over Europe. The European Values Study covers a wide range of human values. The main topics covered concern concepts such as family, work, environment, perceptions of life, politics and society, religion and morality, national identity.\nYou may download the dataset from our module\u0026rsquo;s website on SurreyLearn.\n"
},
{
	"uri": "/en/introduction/script/",
	"title": "Scripts",
	"tags": [],
	"description": "",
	"content": "The Console is very important and useful for small tasks but if you are working on your assignment or any other project of yours you have to save your work. This is very important - first of all because you will have to submit this file with your assignment second, when you make a mistake you will want to review your script and avoid re-write everything!\nScript files in R are similar to text files. In RStudio the so-called Script files are plain text, like a notepad that contains R code. You may edit a Script as you are editing a Word or a text file.\nThe below image shows you how to open an \u0026lsquo;R Script\u0026rsquo; file:\nOnce you created a new Script give it a \u0026ldquo;good name\u0026rdquo;, and save it. For example, you may call it seminar_1.\nHow to run your code. There are different ways of doing so. If you want to:\n Run one line at a time? then place the cursor on the line you want and hit CTRL+ENTER on Windows and COMMAND+ENTER on Mac. Also, you can hit the Run button at the top right side of the Console pane. Many lines at the same time? then select the lines and hit CTRL+ENTER or use the Run button. The entire Script? then use the Source button   "
},
{
	"uri": "/en/descriptive_statistics/explore/",
	"title": "Explore your dataset",
	"tags": [],
	"description": "",
	"content": "Start by creating a folder dedicated to our module. On your computer go to My Documents and create a new folder entitled POLXXXX (XXXX indicates the code of our module). Go back to SurreyLearn and download the dataset in the folder. Go back to RStudio, create a new script file, name it Lab1.R.\nThe first two lines of your script file should include the following three lines.\nrm(list = ls()) # This command will clean your workspace setwd(\u0026quot;~/POLXXXX\u0026quot;) # This command will tell RStudio to read and save files at the folder POLXXXX load(\u0026quot;EVS_UK.RData\u0026quot;) We can now start exploring our data. We can look the names of our variables with the names() function.\nnames(EVS_UK) To see how our dataset looks like we can use the head() function\nhead(EVS_UK) Let\u0026rsquo;s explore what people think about democracy\nboxplot(EVS_UK$v137, main= \u0026quot;Attitudes towards democracy\u0026quot;, ylab= \u0026quot;Agree/Disagree\u0026quot;) "
},
{
	"uri": "/en/introduction/vectors/",
	"title": "Vectors",
	"tags": [],
	"description": "",
	"content": "A vector is a collection of elements, a basic data structure. Vectors are crucial in RStudio because they can used to represent variables. The data types contained by a vector could be logical e.g (TRUE, FALSE), integer e.g (1, 2, 3), or character e.g (\u0026quot;Roula\u0026quot;, \u0026quot;Micheal\u0026quot;). The c() function is very useful as it allows us to create a vector in R. The c stands for combine (or concatenate), because multiple elements are combined into a vector.\nx \u0026lt;-c(1,2,3,4,5,6,7,8,9,10) x An important property of vectors is their length. The length of a vector is the count of how many elements are within it.\nlength(x) Additionally, you may create a vector using the seq() function. The seq() function generates a sequence of numbers. For example, if you want to generate a sequence of numbers from 0 to 30 incremented by 3 you can do so using the following command\nseq(from=0, to=30, by=3) "
},
{
	"uri": "/en/introduction/functions/",
	"title": "Functions in RStudio",
	"tags": [],
	"description": "",
	"content": "What is a function? In simple words, a function is a set of instructions that you want to use. A function is a code written to carry out a specific task. For example, you want to know the sum of 1+2+3, instead of using the + sign we can use the sum function to add numbers. For example:\n1+2+3 or\nsum(1,2,3) or\nsum(1:3) "
},
{
	"uri": "/en/descriptive_statistics/mean.median/",
	"title": "The mean and the median",
	"tags": [],
	"description": "",
	"content": "  The arithmetic mean, in other words the average, is the most commonly used measure of central tendency. Even without realising it we often calculate the mean, for example we use the mean to calculate how much energy we are using per month.\nWe all know how to calculate the mean, by diving the sum of all observations by the total number of observations. Let’s try to do that in R. First, we need to calculate the sum of all observations. We can do that in R by using the sum() function:\nload(\u0026quot;EVS_UK.RData\u0026quot;) sum(EVS_UK$v198,na.rm=TRUE) # na.rm deletes all cases with missing values before calculating the variance ## [1] 11643 the next step will be to divide by the total number of all observation. We do so by using the length() function:\nlength(EVS_UK$v198) ## [1] 1788 Since our overall goal is to calculate the mean we could do so by dividing the sum of all observations by the total number of observations:\nsum(EVS_UK$v198,na.rm=TRUE) / length(EVS_UK$v198) ## [1] 6.511745 As you may already know by now R has some build-in (base) functions that are there to make everything easier for us. In this case, when you want to calculate the mean you simply use the mean() function. Additionally, you may calculate the median by using the median() function.\nCalculate the mean and the median for the variables describing attitudes towards immigration using the function described above.\n "
},
{
	"uri": "/en/introduction/help/",
	"title": "Getting Help",
	"tags": [],
	"description": "",
	"content": "Learning a new software is like learning a new language, and some functions or commands will be like unknown words. An important function in R is help. For example, if we wanted to know how exactly to use the sum function, we could type help(sum). You will see the results in the bottom-right panel.\nhelp(sum) or by using the question mark sign (?)\n?sum How to use the help page All help pages, like the one shown above, follow the same structure.\n   Name Value     Description A brief description of the function   Usage The complete syntax that includes all possible functions   Arguments A brief explanation of all arguments   Details Any relevant detail related to the function and its arguments   Value The output values of the function   Examples Examples of how to use the function    "
},
{
	"uri": "/en/introduction/operator/",
	"title": "The Assignment Operator",
	"tags": [],
	"description": "",
	"content": "We now know how to use a function using the parenthesis sign (), but we are also interested in the output of a function.\nIn RStudio we use the assignment operator ← for creating or updating existing objects. If we wanted to save the results of sum(1,2,3), we would have to use the assignment operator\nmysum \u0026lt;-sum(1:3) the line above created a new object called (mysum) in our environment and saves the result of the sum(1, 2, 3)\nAssignment operator shortcut Windows: \u0026ldquo;Alt\u0026rdquo; + \u0026ldquo;-\u0026rdquo;\nMac: \u0026ldquo;Option\u0026rdquo; + \u0026ldquo;-\u0026rdquo;\n If you look at the Environment pane in RStudio you will see mysum\nIf you want to delete objects from the environment, you can use the broom button.\nYou may give to your objects any name you like but let\u0026rsquo;s admit it, some names are just bad names\u0026hellip; You may find below some examples of good names and bad names\nAvoid using names such as:\n   Good names Bad names     my_model this.is.my.model   M1 m   model1 data, function (i.e. same name as commands )   model.1     "
},
{
	"uri": "/en/introduction/data_frames/",
	"title": "Data Frames",
	"tags": [],
	"description": "",
	"content": "In R a data frame is a kind of object. Like vectors, data frames store data. However, data frames are differ in that they store multiple vectors. It is important that you understand what a data frame is as it is the most frequently used tool in political statistical analysis.\nIf you are having a hard time visualizing a dataframe simply think of what a spreadsheet looks like. Each column of the dataframe can be said to be vector, each vector represents a variable and the rows coincide with an observation. In all statistical software variables are represented by columns and observations are by rows.\nYou may create a data frame manually if you want but living in the age of big data this is rarely the case! There are many example datasets pre-loaded in RStudio.\nLet\u0026rsquo;s have a look at one of these pre-loaded data frames. The data frame is called longley (this is an pre-loaded economic dataset)\nUsing the View function let\u0026rsquo;s see the variables included in the dataset\ndata(\u0026quot;longley\u0026quot;) View(longley) If we want to see individuals columns, in other words, a specific variable in the data frame, then we use the $ sign between the name of the dataset and the name of the variable (e.g name_of_dataset$name_of_variable). Let\u0026rsquo;s start by observing the Unemployment column.\nlongley$Unemployed In addition, often we want to access only certain observations (rows) or only certain variables (columns). By using the square brackets [ ] we subset the data frame. In the square brackets, we insert the coordinates for a row and a column. The row is always first followed by the column. For example, longey[7, 5] gives us the 7th row and the 5th column. If we leave the column coordinate empty then we want to see all columns longey[7, ]. If we leave the row coordinate empty then we want all columns.\nlongley[7,5] Leave the column coordinate empty to see the 7th row\nlongley[7, ] Leave the row empty to see the 5th column\nlongley[ ,5] We may see the first ten rows of a dataset by adding a colon in the brackets\nlongley[1:10, ] Plots Let\u0026rsquo;s create a plot from our dataset. Let\u0026rsquo;s start by creating a scatterplot with the one axis (X) representing the Year and the other (Y) axis the Gross National Product\nplot(longley$Year,longley$GNP) to create the same plot but by using a line instead of dots we add the argument type=\u0026quot;l\u0026quot;\nplot(longley$Year,longley$GNP,type = \u0026quot;l\u0026quot;)  Use the title() function, to give labels to the axes, and a title to your plot. The examples in the help are particularly informative.\n "
},
{
	"uri": "/en/descriptive_statistics/",
	"title": "Exploring Data",
	"tags": [],
	"description": "",
	"content": "In this section we will learn some useful functions which will use for data exploration and manipulation. Also, we will familiarise ourselves with the measures of central tendency and understand how these can help us develop some simple descriptive statistics.\nThe most common measures of central tendency are the mean, median, and mode. These are the basic measures you will use when you are attempting to describe the data you are exploring. In simple words descriptive statistics such as the mean, median and mode provide summaries about your population sample.\nDescriptive statistics are distinguished from inferential statistics. When you are using descriptive statistics you are only describing your data. With inferential statistics, you are trying to generalise from your sample about the whole population. For example, we use inferential statistics to infer what voters think about the current party in government.\nSo, we use inferential statistics to make inferences about the whole population and we use descriptive statistics to describe our data.\n"
},
{
	"uri": "/en/introduction/libraries/",
	"title": "Packages",
	"tags": [],
	"description": "",
	"content": "What is a package in RStudio?\nPackages in RStudio are like apps we are using on our smartphones. For example, if you want to talk to your friends you will install WhatsApp or any other app you prefer. This is the case with R - some statistical actions require specific packages.\nHow to install a package in R\nYou may install a package by typing `install.packages(\u0026ldquo;name of the package\u0026rdquo;)'. Below you may find an example on how to install one of the most important packages in R, tidyverse:\ninstall.packages(\u0026quot;tidyverse\u0026quot;) Alternatively, you may install any package you need by clicking on the Packages tab in the bottom right pane and then click install. A dialog box will appear. In the install Packages dialog write the name of the package you want to install and click install. This will install the package you are looking for.\nHow to load a package\nOnce your package is installed, you are ready to use it. The easiest way to do that is by typing `library(name of the package)'. For example lets load the tidyverse package:\nlibrary(tidyverse) "
},
{
	"uri": "/en/introduction/loading_data/",
	"title": "Loading Data",
	"tags": [],
	"description": "",
	"content": "Now that we have seen some examples of how we can use the pre-installed datasets in R, we can look at some common ways of loading in our own data into the R environment for analysis. This will become more useful as your find and develop your own datasets for any future projects (after all, if you can\u0026rsquo;t load your data correctly how can you analyse it?).\nYou will find all datasets that we will be using in the \u0026lsquo;datasets\u0026rsquo; section of SurreyLearn.\nLearning Objectives By the end of this section you should be able to:\n Set your working directory and get your working directory location. load R data and .csv files using the \u0026lsquo;tidyverse\u0026rsquo; package. load STATA and SPSS data.   Loading .csv data using \u0026lsquo;tidyverse\u0026rsquo; # To practice this method you will need to install the tidyverse package. install.packages(\u0026quot;tidyverse\u0026quot;) # Once you have installed tidyverse, use the below command to call it from your library. library(\u0026quot;tidyverse\u0026quot;) # Note you will only need to install a package once, there is no need to use the install.packages on the same package after you have installed it once. The tidyverse has a number of packages within it, including the readr package. We can use the read_csv() function in the readr package to load in a comma delimited file (.csv). It is very common that you will be able to access data in a csv format, if your data is in .xls or .xlsx format it is recommended that you \u0026lsquo;export as\u0026rsquo; a .csv. This will make it much easier for you to load it into your enviroment with the read_csv() function.\nFrom the data section of SurreyLearn please download the \u0026lsquo;V_Dem.csv\u0026rsquo; file and save it in your working directory. If you are not sure about the location of your working directory use the getwd() function to locate our working directory.\ngetwd() #In you console you should now see somthing like: [1] \u0026quot;/Users/michealslade/Documents/GitHub/Quants_website_2021/Learn_update_2021\u0026quot; Note if you do not get an output, this means you have not set your working directory yet. You can do this by selecting a folder from the session dropdown menu and selecting the \u0026lsquo;Choose Directory\u0026hellip;\u0026rsquo; option as illustrated below.\nOnce you have set your working directory and run getwd you will notice that the output in the console will be unique to each of you. This is because the file path shows you the location of working directory in your personal computer. Now that that we have the tidyverse package loaded as well as the location of our file path and data, we move on to practicing how to load in our csv with one simple line of code.\n# We are going to use the flowing format to load in our data read_csv(\u0026quot;file path + name of file \u0026quot;) # In this case the name of the is 'V_Dem.csv'. So your file path should look something like mine below. V_Dem\u0026lt;- read_csv(\u0026quot;/Users/michealslade/Documents/GitHub/Quants_website_2021/Learn_update_2021/content/Introduction/Loading_Data/V_Dem.csv\u0026quot;) You should now have the below dataset in your Global Environment.\nLoading STATA \u0026amp; SPSS using the \u0026lsquo;sjlabelled\u0026rsquo; When with with political data you will inevitably come across a variety data types that are generated from other statistical softwares such as STATA and SPSS. STATA saves data as a .dta file type while SPSS typically saves files as a .sav file type. Similar to the .csv, we will need to ustilise an r package to load this data into our R environment for analysis.\nFor this we will need to utlise the sjlabelled package.\n# Again we will need to install the package. install.packages(\u0026quot;sjlabelled\u0026quot;) # Once you have installed sjlabelled, we again need to call it from our 'library' library(\u0026quot;sjlabelled\u0026quot;) Once you have completed calling these two functions you are ready to begin practicing loading STATA and SPSS data. For the next part of this exercise you will need to download the \u0026lsquo;V_Dem.dta\u0026rsquo; and \u0026lsquo;V_Dem.sav\u0026rsquo; data from the datasets section of the SurreyLearn module page.\nOne you have these two datasets downloaded move them to your working directory. Remember you can use the getwd() function if you are not sure where your working directory is. Now we will use the read_spss and read_stata functions in sjlabelled to load in these two datasets.\n# get your working directory getwd() # Once you have this add the name of we can load in the two V_Dem files as follows file as follows: # For SPSS data V_Dem_Spss \u0026lt;- read_spss(\u0026quot;/Users/michealslade/Documents/GitHub/Quants_website_2021/Learn_update_2021/content/Introduction/Loading_Data/V_Dem.sav\u0026quot;) # For STATA data V_Dem_Stata \u0026lt;- read_stata(\u0026quot;/Users/michealslade/Documents/GitHub/Quants_website_2021/Learn_update_2021/content/Introduction/Loading_Data/V_Dem.dta\u0026quot;) #Viola! You now should be able to see two datsets in your global environment as in the image below. If you are having issues dont forget to replace my file path above with yours and ensure that the file path is between the \u0026quot;\u0026quot; symbol.\nRecap  You can set your working directory and get your working directory using the setwd() and getwd() commands respectively. You should be able to load R data () and .csv (read_csv) files using the \u0026lsquo;tidyverse\u0026rsquo; package. You should be able to load STATA (read_stata) and SPSS data (read_spss) using the \u0026lsquo;sjlabelled\u0026rsquo; package.   "
},
{
	"uri": "/en/descriptive_statistics/mode/",
	"title": "The mode",
	"tags": [],
	"description": "",
	"content": "  In contrast to the other two measures of central tendency we don’t need a build-in function to calculate the mode. Simply because it is very easy to do it on our own. Think what the mode is…\nTo find the value that appears most often, all we have to do is to tabulate the variable we are interested in. This is easily done with the table() function.\ndem_mode\u0026lt;-table(EVS_UK$v142) dem_mode ## ## 1 2 3 4 5 6 7 8 9 10 ## 24 8 11 15 90 66 84 212 223 1031 In simple words the table() function creates a table that tell us the number of people (cases) that fall into each category. For example, 11 responders place themselves at number 3. In this case the mode is 10, because it is the response that occurs more often, 1031 times.\nThis approach, is practical only when our variable has a small number of values, when our variable consists of a long list of numbers then we need a slightly more sophisticated approach. Let’s see that step by step. Our first step is to sort our variable ranging from the largest to the smallest value. This way the first value is our mode!\ndata_sort\u0026lt;- sort(dem_mode, decreasing=TRUE) data_sort ## ## 10 9 8 5 7 6 1 4 3 2 ## 1031 223 212 90 84 66 24 15 11 8 "
},
{
	"uri": "/en/descriptive_statistics/dispretion/",
	"title": "Measures of dispersion",
	"tags": [],
	"description": "",
	"content": "  The range of a variable is the simplest and easiest measure of dispersion we can calculate, but at the same time is the less reliable one, this is because it depends only upon two values- the two extremes- that quite often are also outliers and are far away from the centre of the distribution.\nThe variance is a measure that takes into consideration how far is each value from the mean. To calculate the variance we have to take into account that negative values might cancel out the positive ones, the mathematical trick to overcome this issue is to square the deviations from the mean. For example if the deviation from the mean is equal to -3 the squared deviation is equal to 9. The downside of this approach is that the variance is reporting the squared deviation from the mean, in other words the outcome is not in the same units as the observed variable, and thus the interpretation is sometimes difficult. But, the variance has some very important uses!\nTo calculate the variance in RStudio we use the var() function.\ntable(EVS_UK$v142) ## ## 1 2 3 4 5 6 7 8 9 10 ## 24 8 11 15 90 66 84 212 223 1031 var(EVS_UK$v142,na.rm=TRUE) # na.rm deletes all cases with missing values before calculating the variance ## [1] 3.552088 To overcome this issue we calculate a statistical quantity called standard deviation . Think of the standard deviation as the average amount the values of a variable deviate from the mean. The greater the dispersion, the bigger the deviation and eventually the standard deviation (sd).\nIn R we may calculate the standard deviation by using the sd() function.\nsd(EVS_UK$v142, na.rm=TRUE)  ## [1] 1.884698 "
},
{
	"uri": "/en/clm/central_limit_theorem/",
	"title": "An illustration",
	"tags": [],
	"description": "",
	"content": "  Learning Objectives By the end of this section be able to:\n Apply the Central Limit Theorem on asample in R, Generate a random sample from a given dataset, Identify if a distribution is skewed or not using a histogram  You now know what the Central Limit Theorem is and why it is so important. You ’ve been recently introduced to RStudio and you are very good at it!\nLet’s examine the Central Limit Theorem using a real world example from the European Value Survey, more specifically a variable describing attitudes towards democracy. In this case, responders were asked whether they believe that “in democracy people choose their leaders in free elections” (v135).\nIf we use the table() and the hist() functions we will see that the variable is not normally distributed- the vast majority of the population believes that democracy translates to free elections. The histogram below shows the distribution of v135, after excluding all missing cases from our EVS_UK dataset. To do so, I used the na.omit() function and using the assignment operator I named our new dataset EVS_UK_clean\nload(\u0026quot;EVS_UK.RData\u0026quot;) EVS_UK_clean\u0026lt;- na.omit(EVS_UK) table(EVS_UK_clean$v135) ## ## 1 2 3 4 5 6 7 8 9 10 ## 19 5 17 18 112 50 93 190 215 756 hist(EVS_UK_clean$v135) According to the Central Limit Theorem if we take repetitive samples from this distribution means then, the sample means will be normally distributed. Remember, the size of our sample is important!\nIf the size of our sample is small then the means sample will mirror the distribution of our sample, i.e. the distribution of our sample and the distribution of the means of our sample will be identical. Let’s see that with a simple example.\nWe will start by asking RStudio to take a random sample of 5 observations.\nHint: Remember that the range of our variable is 0 to 10.\nOur next step is to draw repetitive samples. We will do that by using the replicate() function, the number of repetitions is set to 600, as in the previous example, our sample size is equal to 5 from the v135 variable.\nsamples.600\u0026lt;- replicate(600, sample(EVS_UK_clean$v135,size=5)) Remember that the Central Limit Theorem is about the mean of our samples- our next step is to calculate the mean for each one of our 600 samples. To speed up the process we will use the apply() function.\nThe apply() function is very useful as it help us to make quick operations. The function is easy to use and it has a very simple and clear structure apply(variable, margin, function) where variable is the name of the variable you would like to use; margin: a vector giving the subscripts which the function will be applied over; function: the function you would like to apply, in our example the function we want to apply is the mean.\nsample.means\u0026lt;- apply(samples.600, 2, mean) Our final step is to plot the means of our samples\nmeans.hist\u0026lt;- hist(sample.means, main=\u0026quot;Central Limit Theorem: Sample=5\u0026quot;, xlab=\u0026quot;Mean\u0026quot;) What do you think? Is it similar to our original distribution? It is important to remember that the size of our random sample is essential, we need a sufficiently large sample size.\nLet’s repeat our analysis, but this time we will ask RStudio to take a sample size twice as big as the previous one i.e. 10.\nsamples.10\u0026lt;- replicate(600, sample(EVS_UK$v135,size=10)) sample10.means\u0026lt;- apply(samples.10, 2, mean) means10.hist\u0026lt;- hist(sample10.means,main=\u0026quot;Central Limit Theorem: Sample=10\u0026quot;, xlab=\u0026quot;Mean\u0026quot;) What do you think?\nLet’s replicate our analysis but this time we will increase the size our sample.\nset.seed(1234) samples.110\u0026lt;- replicate(600, sample(EVS_UK$v135,size=110)) sample110\u0026lt;- apply(samples.110, 2, mean) hist(sample110) As you can see, now our sample means follow a normal distribution!\n Recap  You should be able to now apply the Central Limit Theorem using R You can generate a sample from any dataset using the sample() function You shoul know how to use the hist() function.   "
},
{
	"uri": "/en/descriptive_statistics/dispretion.factor/",
	"title": "Categorical variables",
	"tags": [],
	"description": "",
	"content": "  Some variables, consist of named categories, e.g. the name of your favourite brand. A category-variable, or a categorical variable refers to any variable that puts individuals into categories. These variables are also called nominal variables. The word nominal comes from Latin (nominalis=of a name), because we are giving names to the values of our variable.\nWith categorical variables we want to understand the frequency with which each value appears in our dataset. As you already know the easiest way to do so is by producing a table. Remember the table () function. The appropriate measure of central tendency for categorical variables is the mode and/or the median.\nBelow we will learn some basic data manipulation for categorical variables. Starting with identifying the class() of a variable before we move to assigning a new name to variable and to the values of a categorical variable.\nThere are numerous data types in R. The most frequent used ones are numeric, character (string) or factor, and logical (TRUE or FALSE). To check the type of data contained in a variable we can use the class() function.\nload(\u0026quot;EVS_UK.RData\u0026quot;) To find the length of a character variable we use the nchar() function.\nEVS_UK$education\u0026lt;-EVS_UK$v243_r_weight table(EVS_UK$education) ## ## 1 2 3 ## 590 313 885 As you know, education is a classic example of a categorical variable. How can we assign labels to the values of the variable? This is easy.\nNote that as the same time we will learn how to covert a variable to factor but also we will give a name to the values.\nLet’s do it!\nEVS_UK$education \u0026lt;- factor(EVS_UK$education, levels = c(1, 2, 3), labels = c(\u0026quot;Low\u0026quot;, \u0026quot;Medium\u0026quot;, \u0026quot;Upper\u0026quot;)) table(EVS_UK$education) ## ## Low Medium Upper ## 590 313 885 Let’s examine our new factor variable with a frequency table\ntable(EVS_UK$education) ## ## Low Medium Upper ## 590 313 885 The most common graphical representation of categorical variables is bar graphs and pie charts.\nlibrary(ggplot2) ggplot(data.frame(EVS_UK), aes(x=education)) + geom_bar() Adjust the width of the bars using the width function, change the appearance of the axes by giving labels. Give a title to your graph. RStudio Base cheatsheet "
},
{
	"uri": "/en/clm/",
	"title": "The Central Limit Theorem",
	"tags": [],
	"description": "",
	"content": "The Central Limit Theorem is one of the most important concepts in statistics, it is at the core of hypothesis testing.\nThe main idea of the Central Limit Theorem is that if we take repetitive samples from a random sample, then the sample means will be normally distributed. I prepared an example for you!\n"
},
{
	"uri": "/en/bivariate/",
	"title": "Bivariate Analysis",
	"tags": [],
	"description": "",
	"content": "Bivariate analysis refers to the analysis of two variables. When we perform a bivariate analysis our aim is to examine whether there is a relationship between two variables, the strenght of this relationship, but also whether there are differences between the two variables and whether these differences are significant.\n"
},
{
	"uri": "/en/bivariate/ttest/",
	"title": "T-test",
	"tags": [],
	"description": "",
	"content": "  This time we will use a dataset named midwest.\nDownload the dataset from SurreyLearn and load it into RStudio. To load our file we use the load() function. Give a name to your dataset using the assigment operator \u0026lt;-.\nLet’s have a look at the dataset. Alternatively, you can have a look at the codebook- that is the document that comes with the dataset. The codebook describes the contents, structure, and layout of a data collection but it also provides a detailed overview of all variables included in the dataset.\nWe will explore our dataset, by using the head() and View() functions.\nThe head() function shows us the head, the first rows, of our dataset.\nThe view() function allows us to see inside the data frames. At the view window you can also sort the dataset by any column simply by clicking on the column.\nLet’s start by examining the one paired t-test. That means that we will compare the mean of our sample against a known true value. To be more specific, we will calculate the percent of educated adults in the midwest, against a known value the percent of educated adults nationwide. Our overall aim is to examine whether the mean of educated adults in the midwest is significantly different to the national average. That means it could be higher or smaller.\nAccording to official statistics, the percentage of college educated adults is \\(32%\\), our aim is to examine if in the midwest the average of college educated adults is statistically different to \\(32%\\).\nA boxplot can give us a quick visual assessment of the data, a brief idea about what is going on in our data before we perform the t-test.\nTo do so we will use a very useful package in R, called ggplot2.\nWe first have to install ggplot2 by using the install.packages(\"ggplot2\") function:\nplot1 \u0026lt;- ggplot(midwest, aes(percollege)) + geom_histogram() + theme_classic() plot1  One-tailed t-test Our next step is to perform the one-tailed t-test. Taking into consideration the states that are part of the Midwest, we hypothesise that on average the percentage of educated adults will be smaller than the average.\nt.test(midwest$percollege, mu = 32, alternative = \u0026quot;less\u0026quot;) ## ## One Sample t-test ## ## data: midwest$percollege ## t = -45.827, df = 436, p-value \u0026lt; 2.2e-16 ## alternative hypothesis: true mean is less than 32 ## 95 percent confidence interval: ## -Inf 18.7665 ## sample estimates: ## mean of x ## 18.27274 Note: 2.2e-16 is 2.2 x 10-16 which is 0.00000000000000022\n Two tailed t-test Our next step is to compare the difference between two different states. In other words, our next step is to compare whether the two means, representing two different groups, are statistically different. This is called two sample t-test.\nBefore we start, install a package called dplyr and use the library() function to load it in RStudio.\nCreate the two groups We start by creating the two groups:\nlibrary(dplyr) data.frame1 \u0026lt;- midwest %\u0026gt;% filter(state == \u0026quot;IN\u0026quot; | state == \u0026quot;IL\u0026quot;) %\u0026gt;% select(state, percollege) We can examine the distribution of the two groups with a box-plot:\nggplot(data.frame1, aes(state, percollege)) + geom_boxplot() + labs(title = \u0026quot;Two paired t-test\u0026quot;, y=\u0026quot;Education\u0026quot;, x=\u0026quot;State\u0026quot;) + theme_classic() Our next step is to compare the two means:\nt.test(percollege ~ state, data = data.frame1) ## ## Welch Two Sample t-test ## ## data: percollege by state ## t = 2.4947, df = 191.61, p-value = 0.01345 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.4533698 3.8774354 ## sample estimates: ## mean in group IL mean in group IN ## 18.78814 16.62274 The results of the analysis suggest that the p\u0026lt; 0.05 is supporting the alternative hypothesis that the true difference in means is not equal to zero. What that really means is that there is a statistical difference between the two means.\n  "
},
{
	"uri": "/en/graphs/",
	"title": "Visualising relationships",
	"tags": [],
	"description": "",
	"content": "In this section we will learn how to produce graphs in RStudio! In R you can produce simple graphs like a histogram or a bar-plot or even maps and interactive graphs!\nMany media outlets and/or polling agencies even public institutions are using RStudio to produce graphs and reports.\nFor example the BBC team developed the package below which is free to use if you want to create BBC style graphics!\nBBC Visual and Data Journalism cookbook for R graphics\nWe will start by creating some simple graphs to learn the basic commands.\n"
},
{
	"uri": "/en/regression_analysis/",
	"title": "Regression Analysis- The basics",
	"tags": [],
	"description": "",
	"content": "Regression analysis is in simple words a statistical method that allows you to test the relationship between two or typically more variables. There are many types of regression analysis (linear, logistic, multinomial), but all of them at their core, examine the effect of one or more independent variables on a dependent variable.\n"
},
{
	"uri": "/en/graphs/ggplot/",
	"title": "The ggplot package",
	"tags": [],
	"description": "",
	"content": "  Learning Objectives By the end of this section you will:\n Learn the basic concepts associated the grammar of graphics such as aesthetic mapping. Be introduced to some initial steps to preparing your data for plotting graphs.   The ggplot package The most common data visualisation package in RStudio is ggplot. We may install ggplot by using the install.packages() function. We write install.packages(\"ggplot2\") and we call the package by using the library() function.\nlibrary(ggplot2) First of all, as most packages in RStudio the ggplot team created a cheatsheet. You may find it here ggplot Cheatsheet\nIf we call the ggplot() function then we will create an empty canvas. We start by loading our dataset entitled EVS_UK.RData\nload(\u0026quot;EVS_UK.RData\u0026quot;) ggplot(EVS_UK) # this created an empty plot the next step is to specify the variables we would like to use, as you know we cannot plot the whole dataset!\nTo specify which variables we would like to plot we have to include in the function the so called aes() section that specifies the aesthetic mappings, in other words, this section specifies how to map our variables.\nLet’s start by creating a bar to see how the aes section works - you already know how to do that but this time we will give a name to our plot.\nIn our analysis we will use two socio-demographics variables gender and education. Gender is a dichotomous variable describing gender. Education is an ordinal variable with three levels - low, medium, and high.\nIn the dataset the code of the variable describing gender is EVS_UK$v225, and the name of the variable describing education is EVS_UK$v243_r_weight.\nBefore we proceed, we will give meaningful names to our variable swhile at the same time we will make sure that our new variables are categorical (factor) variable for gender- as it should be. We can easily do that by using the assignment operator \\(\u0026lt;-\\) and the as.factor function.\nEVS_UK$gender\u0026lt;- factor(EVS_UK$v225, levels = c(1,2), labels = c(\u0026quot;Men\u0026quot;, \u0026quot;Women\u0026quot;)) table(EVS_UK$gender) ## ## Men Women ## 792 996 Note: at the left side of the equation I specified the dataset at which my new variable belongs to - that is EVS_UK.\nWe will do the same for the variable describing education and is currently named v243_r_weight.\nRecall, Lecture 2 (Descriptive Statistics) during the lab session we used the same function to rename v243_r_weightto education.\nIn this example education is an ordinal variable with three levels- low, medium, high.\nEVS_UK$education \u0026lt;- ordered(EVS_UK$v243_r_weight, #here you specify that this is ordered variable levels = c(1,2,3), # here you specify the values of the variable labels = c(\u0026quot;Low\u0026quot;, \u0026quot;Medium\u0026quot;, \u0026quot;High\u0026quot;)) #here you specify the names of the values  Recap  ggplot2 refers to the grammar of graphic and is the main package in the ‘tidyverse’ for plotting data. Aesthetic mapping or aes() is the function used tell ggplot2 which variables to use in our plot. Before we plot our data we need to ensure that our labels are meaningful.   "
},
{
	"uri": "/en/graphs/graphs_categorical/",
	"title": "Graphs-categorical variables",
	"tags": [],
	"description": "",
	"content": "  Learning Objectives By the end of this section you should be able to:\n Understand and use aesthetic mapping within ggplot2 Plot a barplot using categorical data Make adjustments to the theme and legend of you barplot  Below you will find some examples of graphs for categorical variables. Of course there are many more graphs available to help you visualise your hypothesis and research question.\n Bar Plots Let’s use this minimal example to see how ggplot works.\nlibrary(ggplot2) plot1\u0026lt;-ggplot(EVS_UK, aes(x = gender)) + geom_bar() + theme_classic() plot1 # You can\u0026#39;t view the plot unless you call it  Our first step is to give meaningful names to the values of our variable (gender). In our dataset \\(1\\) represents men and \\(2\\) women.\nplot1\u0026lt;-plot1 + scale_x_discrete(breaks=c(\u0026quot;1\u0026quot;, \u0026quot;2\u0026quot;), labels=c(\u0026quot;Men\u0026quot;, \u0026quot;Women\u0026quot;)) plot1 Let’s give labels to our axes, again we call our plot, plot1 and by using the \\(+\\) sign we call the labs function, part of ggplot.\nplot1\u0026lt;- plot1 +labs( y=\u0026quot;Number of cases\u0026quot;, x = \u0026quot;Responder\u0026#39;s gender\u0026quot;) Additionaly we may create a barplot describing two variables gender and educational level. We build upon the exisitng graph plot1:\nplot1\u0026lt;-plot1 + geom_bar(aes(fill = education)) plot1 We can move the position of the legend:\nplot1 + theme(legend.position=\u0026quot;top\u0026quot;) Or, we may position the legend in the graph:\nplot1\u0026lt;-plot1 + theme(legend.position = c(0.25, 0.9), legend.direction = \u0026quot;horizontal\u0026quot;) plot1  As you may have noticed typically I am using a white background for my graphs. We may change the background by using different backgound themes. The most commonly used themes are the following:\n    Function Theme    theme_gray() Grey background and white gridlines  theme_bw() Classic dark-on-light  theme_minimal() A minimalistic theme with no background annotations  theme_classic() A classic-looking theme, with x and y axis lines and no gridlines    plot1\u0026lt;-plot1 + theme(legend.position = c(0.3, 0.9), legend.direction = \u0026quot;horizontal\u0026quot;) + theme_classic() plot1  Additionaly we can plot the two bars, the one next to the other\nplot2\u0026lt;-ggplot(EVS_UK, aes(x = education, fill = gender)) + geom_bar(position = \u0026quot;dodge\u0026quot;) + theme_classic() plot2  Recap  You can control the aesthetic mapping within ggplot 2 using the aes() Categorical variables can be plotted on barplots using ggplot() + geom_bar Always ensure you prepare your data before plotting   "
},
{
	"uri": "/en/graphs/graphs_continuous/",
	"title": "Graphs-continuous variables",
	"tags": [],
	"description": "",
	"content": "        Learning Objectives By the end of this section you should be able to:\n Understand how to plot continuous variables Use boxplots, line plots , violin plots and 3D plots for continuous variables   One continuous variable For the following example we will use a variable describing citizens’ satisfaction with the political system, the name of the variable is v144. We will use the names() function to give a meaningful name to the variable.\nThe general formula is: names(my_data)[names(my_data) == “old.variable.name”] \u0026lt;- “new_variable_name”\nnames(EVS_UK)[names(EVS_UK)==\u0026quot;v144\u0026quot;]\u0026lt;- \u0026quot;pol_sat\u0026quot; table(EVS_UK$pol_sat) ## ## 1 2 3 4 5 6 7 8 9 10 ## 170 104 178 223 243 227 305 201 55 46 plot5 \u0026lt;- ggplot(na.omit(EVS_UK), aes(gender,pol_sat)) plot5\u0026lt;-plot5 + geom_boxplot(varwidth=T, fill=\u0026quot;mediumpurple4\u0026quot;) + labs(title=\u0026quot;Box plot\u0026quot;, subtitle=\u0026quot;Satisfaction with the political system by gender\u0026quot;, caption=\u0026quot;Source: European Value Study (2019)\u0026quot;, x=\u0026quot;Gender\u0026quot;, y=\u0026quot;Satisfied with the political system\u0026quot;) plot5+theme_classic() See here for all other colours available\n Violin Plots plot6 \u0026lt;- ggplot(na.omit(EVS_UK), aes(education, pol_sat)) plot6\u0026lt;-plot6 + geom_violin(fill=\u0026quot;skyblue\u0026quot;) + labs(title=\u0026quot;Violin plot\u0026quot;, subtitle=\u0026quot;Satisfaction with the political system by level of education\u0026quot;, caption=\u0026quot;Source: European Value Study (2019)\u0026quot;, x=\u0026quot;Education\u0026quot;, y=\u0026quot;Satisfied with the political system\u0026quot;) plot6+theme_classic()  Continuous variables Lines In this section we will use the EconomistData dataset.\nplot7 \u0026lt;- ggplot(data = EconomistData, mapping = aes(x = HDI, y = CPI)) + geom_line() + facet_wrap(facets = vars(Region))+ labs(title= \u0026quot;Lines\u0026quot;, subtitle = \u0026quot;Human development index versus consumer price index\u0026quot;, x = \u0026quot;Human Development Index\u0026quot;, y = \u0026quot;Consumer Price Index\u0026quot;) + theme_classic() plot7   3D Plots: The plotly package Let’s try to plot some 3D plots. To do so we should install an additional package entitled plotly, install.package(\"plotly\").\nlibrary(plotly) EconomistData \u0026lt;- read.csv(\u0026quot;EconomistData.csv\u0026quot;) plot8\u0026lt;- plot_ly(data=EconomistData, x = ~HDI, y = ~CPI, z = ~HDI.Rank, color = ~Region, colors = c(\u0026#39;#7B68EE\u0026#39;, \u0026#39;#800000\u0026#39;)) %\u0026gt;% add_markers() %\u0026gt;% layout(scene = list(xaxis = list(title = \u0026#39;HDI\u0026#39;), yaxis = list(title = \u0026#39;CPI\u0026#39;), zaxis = list(title = \u0026#39;HDI Rank\u0026#39;))) plot8  {\"x\":{\"visdat\":{\"ca82217b7f49\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"ca82217b7f49\",\"attrs\":{\"ca82217b7f49\":{\"x\":{},\"y\":{},\"z\":{},\"color\":{},\"colors\":[\"#7B68EE\",\"#800000\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\",\"mode\":\"markers\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"HDI\"},\"yaxis\":{\"title\":\"CPI\"},\"zaxis\":{\"title\":\"HDI Rank\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[0.797,0.771,0.793,0.663,0.718,0.908,0.805,0.71,0.744,0.776,0.724,0.689,0.72,0.674,0.574,0.633,0.454,0.625,0.727,0.77,0.589,0.768,0.665,0.725,0.723,0.717,0.68,0.76,0.91,0.783,0.735],\"y\":[3,7.3,7.8,2.8,3.8,8.7,7.2,3.4,4.8,4.2,5.2,2.6,2.7,3.4,2.7,2.5,1.8,2.6,3.3,3,2.5,3.3,2.2,3.4,7,5.8,3,3.2,7.1,7,1.9],\"z\":[45,53,47,108,84,6,44,87,69,51,81,98,83,105,131,117,158,121,79,57,129,58,107,80,82,85,104,62,4,48,73],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"Americas\",\"marker\":{\"color\":\"rgba(123,104,238,1)\",\"line\":{\"color\":\"rgba(123,104,238,1)\"}},\"textfont\":{\"color\":\"rgba(123,104,238,1)\"},\"error_y\":{\"color\":\"rgba(123,104,238,1)\"},\"error_x\":{\"color\":\"rgba(123,104,238,1)\"},\"line\":{\"color\":\"rgba(123,104,238,1)\"},\"frame\":null},{\"x\":[0.398,0.929,0.5,0.522,0.523,0.687,0.898,0.547,0.617,0.901,0.624,0.897,0.524,0.761,0.661,0.653,0.483,0.458,0.908,0.504,0.466,0.644,0.688,0.866,0.51,0.691,0.682,0.495,0.704,0.617],\"y\":[1.5,8.8,2.7,5.7,2.1,3.6,8.4,3.1,3,8,3.1,5.4,2.2,4.3,2.5,2.7,1.5,2.2,9.5,2.5,2.2,2.6,3.9,9.2,2.7,3.3,3.4,2.4,3.1,3.5],\"z\":[172,2,146,141,139,101,13,134,124,12,122,15,138,61,109,110,149,157,5,145,153,112,99,26,142,97,103,147,90,125],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"Asia Pacific\",\"marker\":{\"color\":\"rgba(142,85,187,1)\",\"line\":{\"color\":\"rgba(142,85,187,1)\"}},\"textfont\":{\"color\":\"rgba(142,85,187,1)\"},\"error_y\":{\"color\":\"rgba(142,85,187,1)\"},\"error_x\":{\"color\":\"rgba(142,85,187,1)\"},\"line\":{\"color\":\"rgba(142,85,187,1)\"},\"frame\":null},{\"x\":[0.739,0.716,0.7,0.756,0.733,0.796,0.733,0.745,0.615,0.649,0.771,0.755,0.766,0.607,0.699,0.686,0.729,0.641],\"y\":[3.1,2.6,2.4,2.4,3.2,4,4.1,2.7,2.1,2.9,4,2.4,3.3,2.3,4.2,1.6,2.3,1.6],\"z\":[70,86,91,65,74,46,75,68,126,111,54,66,59,127,92,102,76,115],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"East EU Cemt Asia\",\"marker\":{\"color\":\"rgba(148,67,138,1)\",\"line\":{\"color\":\"rgba(148,67,138,1)\"}},\"textfont\":{\"color\":\"rgba(148,67,138,1)\"},\"error_y\":{\"color\":\"rgba(148,67,138,1)\"},\"error_x\":{\"color\":\"rgba(148,67,138,1)\"},\"line\":{\"color\":\"rgba(148,67,138,1)\"},\"frame\":null},{\"x\":[0.885,0.886,0.863,0.771,0.84,0.865,0.895,0.835,0.882,0.884,0.905,0.861,0.816,0.898,0.908,0.874,0.805,0.81,0.867,0.832,0.91,0.943,0.813,0.809,0.781,0.834,0.884,0.878,0.904,0.903],\"y\":[7.8,7.5,7.8,3.3,6.3,4.4,9.4,6.4,9.4,7,8,3.4,4.6,8.3,7.5,3.9,4.2,4.8,8.5,5.6,8.9,9,5.5,6.1,3.6,4,5.9,6.2,9.3,8.8],\"z\":[19,18,28,55,31,27,16,34,22,20,9,29,38,14,7,24,43,40,25,36,3,1,39,41,50,35,21,23,10,11],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"EU W. Europe\",\"marker\":{\"color\":\"rgba(147,48,92,1)\",\"line\":{\"color\":\"rgba(147,48,92,1)\"}},\"textfont\":{\"color\":\"rgba(147,48,92,1)\"},\"error_y\":{\"color\":\"rgba(147,48,92,1)\"},\"error_x\":{\"color\":\"rgba(147,48,92,1)\"},\"line\":{\"color\":\"rgba(147,48,92,1)\"},\"frame\":null},{\"x\":[0.698,0.806,0.644,0.707,0.573,0.888,0.698,0.76,0.739,0.76,0.582,0.705,0.831,0.77,0.632,0.698,0.846,0.462],\"y\":[2.9,5.1,2.9,2.7,1.8,5.8,4.5,4.6,2.5,2,3.4,4.8,7.2,4.4,2.6,3.8,6.8,2.1],\"z\":[96,42,113,88,132,17,95,63,71,64,130,89,37,56,119,94,30,154],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"MENA\",\"marker\":{\"color\":\"rgba(139,28,48,1)\",\"line\":{\"color\":\"rgba(139,28,48,1)\"}},\"textfont\":{\"color\":\"rgba(139,28,48,1)\"},\"error_y\":{\"color\":\"rgba(139,28,48,1)\"},\"error_x\":{\"color\":\"rgba(139,28,48,1)\"},\"line\":{\"color\":\"rgba(139,28,48,1)\"},\"frame\":null},{\"x\":[0.486,0.427,0.633,0.331,0.316,0.482,0.568,0.343,0.328,0.433,0.286,0.533,0.4,0.43,0.537,0.349,0.363,0.674,0.42,0.541,0.344,0.353,0.509,0.45,0.329,0.48,0.4,0.359,0.453,0.728,0.322,0.625,0.295,0.459,0.429,0.459,0.773,0.336,0.619,0.408,0.522,0.466,0.435,0.446,0.43,0.376],\"y\":[2,3,6.1,3,1.9,2.5,5.5,2.2,2,2.4,2,2.2,2.2,3,1.9,2.5,2.7,3,3.5,3.9,2.1,2.2,2.2,3.5,3.2,3,3,2.8,2.4,5.1,2.7,4.4,2.5,2.4,5,2.9,4.8,2.5,4.1,1.6,3.1,3,2.4,2.4,3.2,2.2],\"z\":[148,167,118,181,185,150,133,179,183,163,187,137,170,165,136,177,174,106,168,135,178,176,143,160,182,151,171,175,159,77,184,120,186,156,166,155,52,180,123,169,140,152,162,161,164,173],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"SSA\",\"marker\":{\"color\":\"rgba(128,0,0,1)\",\"line\":{\"color\":\"rgba(128,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(128,0,0,1)\"},\"error_y\":{\"color\":\"rgba(128,0,0,1)\"},\"error_x\":{\"color\":\"rgba(128,0,0,1)\"},\"line\":{\"color\":\"rgba(128,0,0,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} Want to learn more about plotly? You may visit https://plot.ly/ggplot2/\n Recap  The plotly package can be used to create 3D maps of continuous data. Continuous data can be represented using a variety of plot types. geom_boxplot() is used to create box plots geom_violin() is used to create violin plots geom_line() is used to create line plots   "
},
{
	"uri": "/en/graphs/graphs_ordinal/",
	"title": "Graphs-ordinal variables",
	"tags": [],
	"description": "",
	"content": "  Learning Objectives By the end of this section you should be able to:\n Plot ordinal variables using ggplot2 Change or adjust the labels of a variable Use the density plot to represent ordinal variables.  In this section we will use two variables describing anti-immigration attitudes, the first one is called v184 and is asking respondents to agree or diagree with the following statement “Immigrants take away jobs”. The second variable is called v186 and is asking respondents whether “Immigrants are responsible for crime”.\nnames(EVS_UK)[names(EVS_UK) == \u0026quot;v184\u0026quot;] \u0026lt;- \u0026quot;immi_jobs\u0026quot; table(EVS_UK$immi_jobs) # This is to check whether the function was correctly specified ## ## 1 2 3 4 5 ## 71 197 631 610 272 We may add labels to the values using the functions we used at section 1:\nIf you only want to rename the name of the variable the easiest way is by using the names()function.\n EVS_UK$immi_jobs \u0026lt;- ordered(EVS_UK$immi_jobs,#here you specify that this is ordered variable levels = c(1,2,3,4,5), # here you specify the values of the variable labels = c(\u0026quot;Completely agree\u0026quot;, \u0026quot;Agree\u0026quot;, \u0026quot;Neither/nor\u0026quot;,\u0026quot;Disagree\u0026quot;, \u0026quot;Completely disagree\u0026quot; )) #here you specify the names of the values table(EVS_UK$immi_jobs) ## ## Completely agree Agree Neither/nor Disagree ## 71 197 631 610 ## Completely disagree ## 272 We will do the same for the variable describing whether “Immigrants tare responsible for crime”.\nEVS_UK$immi_crime \u0026lt;- ordered(EVS_UK$v186,#here you specify that this is ordered variable levels = c(1,2,3,4,5),# here you specify the values of the variable labels = c(\u0026quot;Completely agree\u0026quot;, \u0026quot;Agree\u0026quot;, \u0026quot;Neither/nor\u0026quot;,\u0026quot;Disagree\u0026quot;, \u0026quot;Completely disagree\u0026quot; )) #here you specify the names of the values table(EVS_UK$immi_jobs) ## ## Completely agree Agree Neither/nor Disagree ## 71 197 631 610 ## Completely disagree ## 272 plot3\u0026lt;-ggplot(na.omit(EVS_UK), aes(x = immi_crime),na.rm = TRUE) + geom_bar() + facet_grid(gender ~.)+ theme_classic() #The na.omit() function will remove NAs plot3  Density Plots plot4 \u0026lt;- ggplot(na.omit(EVS_UK), aes(immi_crime)) plot4 + geom_density(aes(fill=factor(gender)), alpha=0.5) + labs(title=\u0026quot;Density plot\u0026quot;, subtitle=\u0026quot;Anti-immigration attitudes by gender\u0026quot;, caption=\u0026quot;Source: European Value Study\u0026quot;, x=\u0026quot;Anti-immigration attitudes\u0026quot;, fill=\u0026quot;Gender\u0026quot;)+ theme_classic()  Recap  You can plot ordinal data using geom_density() in ggplot2. You can adjust or rename the ordinal data using the ordered,levels and labels functions in R.   "
},
{
	"uri": "/en/regression_analysis/regression/",
	"title": "Introduction to regression analysis",
	"tags": [],
	"description": "",
	"content": "  As always, start by opening a new script file, give to your file a “good name” and save it in our folder (POLXXXX). Remove everything from RStudio’s memory and set your working directory\nToday we will learn how to produce a regression model, to do so, we will use a dataset produced by Pippa Norris. The dataset is called “DEMOCRACY CROSS-NATIONAL DATA”, and you may find it on our module’s website on SurreyLearn.\nDownload the data in stata format (.dta) of the dataset and the respective codebook in the folder entitled POLXXXX and import the dataset on RStudio.\nAs you see there are almost a thousand variables included in the dataset mesuring social, economic, and political characteristics of 193 nations.\nLet’s start by exploring our dataset\nhead(Democracy) As you can see there are many variables included in the dataset. We will only use two variables measuring the level of democracy in 1984 and the second one GDP Per Capita during the same year.\nSince we are not using the whole dataset we will create a subset of the main dataset. The subset will include only the two varaibles we will use in our analysis. We will name our new dataset “GDP_Dem”. To do so we use the subset() function along with the c() function.\nOur new dataset consists of two variables only: Dem_Gov1984 and GDPPC1984.\nWe may summarise our variables by using the summary() function. To save time I will ask RStudio to provide a summary of our dataset since the dataset only consists of the two varaibles we are interested in. You may see that we have a few NA’s in the dataset and that they are both continuous variables.\nPearson’s r We will start by calculating Pearson’s r to examine the strenght of the association between the two variables. We observe that the correlation coefficient is equal to ca. \\(0.52\\) that indicates a positive and not very strong statistical relationship between the two variables.\ncor(GDP_Dem, use=\u0026quot;complete.obs\u0026quot;) # remember that we have NA\u0026#39;s in our dataset ## Dem_Gov1984 GDPPC1984 ## Dem_Gov1984 1.0000000 0.5198087 ## GDPPC1984 0.5198087 1.0000000 We may also draw a scatterplot to examine this relationship. To plot our scatterplot we will use the ggplot2 package.\nlibrary(ggplot2) plot.1\u0026lt;-ggplot(GDP_Dem, aes(x=Dem_Gov1984, y=GDPPC1984)) +geom_point(size=3,colour=\u0026quot;red\u0026quot;) + theme_classic()+ labs(x=\u0026quot;Democratic Governance\u0026quot;, y=\u0026quot;GDP Per Capita\u0026quot;) plot.1 By calculating the correlation coefficient we learned that there is a positive and medium range association between Democracy and GDP Per Capita. The scatterplot helped us visualise this relationship, we observe that there is a positive and linear relationship between the two variables.\n Bivariate regression analysis To examine how the one variable affects the other , what changes it triggers, we will run a regression analysis. We will use the lm() function.\nThe two main arguments of the lm() function are outlined below:\n    Argument Description    formula A mathematical description of the model, y ~ x1+x2+x3+… or DV~IV1+IV2+IV3  data The name of the dataset we would like to use, the dataset that contains the variables we are interested in.    model.1 \u0026lt;- lm(Dem_Gov1984~GDPPC1984, data=GDP_Dem) The lm() function calculated the relationship between Democracy and GDP Per Capita, in RStudio language our formula is an object and we can give it a name. We named our model model.1. By giving a name to an object we can easily calculate further quantities and plot our results.\nLet’s start by examing the outcome of the regression analysis. We can see how our model looks like by using the summary() function.\nsummary(model.1) ## ## Call: ## lm(formula = Dem_Gov1984 ~ GDPPC1984, data = GDP_Dem) ## ## Residuals: ## Min 1Q Median 3Q Max ## -104.470 -16.507 -6.817 16.879 53.869 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.924e+01 3.777e+00 5.094 1.70e-06 *** ## GDPPC1984 1.519e-03 2.522e-04 6.024 2.99e-08 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 27.76 on 98 degrees of freedom ## (95 observations deleted due to missingness) ## Multiple R-squared: 0.2702, Adjusted R-squared: 0.2628 ## F-statistic: 36.28 on 1 and 98 DF, p-value: 2.987e-08 Note: To disable scientific notation in R, in other words to display regular numbers instead of using the e+10-like notation, run the function below to disable it. options(scipen = 999)\n "
},
{
	"uri": "/en/graphs/faq_ggplot/",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": "  Why can’t I see my graph? One common reason why your graph may not be displaying is that you may have not typed the name of your graph and run it.\n R cannot find the variable I would like to plot. There are a two common reasons why R might not be able to find your variable. Check that you have spelt the name exactly as it appears in the dataset (remember that you can use the codebook to check variable names and descriptions to do this)\nAnother possiblity is that you may have not used the $ to explicitly state which variable you would like R to find.\n How do I save my plot? Once you plot your graph in the bottom right panel of R studio you can use the ggsave() function to save your most recent plot. Your code should look something like\nlibrary(ggplot2) ggsave(\u0026quot;the_name_of_your_plot\u0026quot;)  I can’t find the plot that I saved. Whenever you use the ggsave() function, your plot will be saved in your working directory. If you are not sure what your working directory is use the getwd() function.\n I keep receiving and error when trying to use ggplot. Check if you have called ggplot from your library using the function library(ggplot2).\n "
},
{
	"uri": "/en/regression_analysis/regression-interpretation/",
	"title": "Interpreting the regression output",
	"tags": [],
	"description": "",
	"content": "  Let’s start by having a look at the formula:\nlm(formula = Dem_Gov1984 ~ GDPPC1984, data = GDP_Dem)  Dem_Gov1984 : is our dependent variable  GDPPC1984  : is our independent variable\nResiduals: ## Min 1Q Median 3Q Max ## -104.470 -16.507 -6.817 16.879 53.869   Residuals : The difference between the observed values and the predicted values of GDPPC1984.\nCoefficients: Estimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 1.924e+01 3.777e+00 5.094 1.70e-06 *** GDPPC1984 1.519e-03 2.522e-04 6.024 2.99e-08 *** This part of the output describes the coefficients for the intercept and the independent variables.\nRemember the general formula: Y=a+bx+e\nWe can re-write the formula using the coefficients to describe the relationship between Dem_Gov1984 and GDPPC1984.\n  Dem_Gov1984 = 1.92 + (1.51 * GDPPC1984)   This tells us that for each unit increase in the variable Dem_Gov1984, GDPPC1984 increases by 1.51\nThe standard error estimates the standard deviation of the sampling distribution of the coefficients in our model.\nThe t statistic , is used to conduct hypothesis tests on the regression coefficients. The t-test is obtained by dividing the coefficients by the standard error.\nSignif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 The p-value  for each of the coefficients included in the model. According to the null hypothesis the value of the coefficient we are interested in is zero. Remember that hypothesis testing is based on the null hypothesis, the p-value will tell us whether we can reject or not the null hypothesis.\nR-squared: 0.2702, Adjusted R-squared: 0.2628  The R-squared  and adjusted R-squared tell us how much of the variance in our model is accounted for by the independent variable.\nThe adjusted R-squared  is a modified version of R-squared that has been adjusted for the number of predictors in the model.\n"
},
{
	"uri": "/en/regression_analysis/regression-graphs/",
	"title": "Visualising the relationship",
	"tags": [],
	"description": "",
	"content": "  Let’s plot the elationship between the two variables, dependent and independent, but this time we will include the regression line.\nplot.2\u0026lt;-ggplot(GDP_Dem, aes(x=GDPPC1984, y=Dem_Gov1984)) +geom_point(size=3) + stat_smooth(method = \u0026quot;lm\u0026quot;, col = \u0026quot;red\u0026quot;)+ theme_classic()+ scale_x_continuous(breaks = seq(0, 75000, by = 5000))+ scale_y_continuous(breaks = seq(0, 200, by = 10))+ labs(x=\u0026quot;Democratic Governance\u0026quot;, y=\u0026quot;GDP Per Capita\u0026quot;) plot.2 The graph replicates the table, when our independent variable is equal to zero, then the starting point of the line (the Y axis) is predicted to be approximately 20, the same as in our table (19.24).\nBy looking at the regression line we should also observe that the position of the line matches the coefficients we estimated, and reported in our table. The coeeficient for the variable describing GDP per Capita GDPPC1984 is 0.001519. The line seems to reflect this. First of all, the direction of the line imply that there is a positive relationship between the dependent and the independent variable. Indeed, the positive sign of the coefficient represents this positive relationship between the two variables. In other words, higher levels of GDP per Capita are associated with higher levels of Democracy. For each additional unit of GDP per Capita, Democratic Governance increases by 0.001519.\n"
},
{
	"uri": "/en/multivariate_regression/",
	"title": "Multivariate regression analysis",
	"tags": [],
	"description": "",
	"content": "  In this section we will learn how to run a regression analysis with more than one independent variables.\nAlmost all social phenomena have more than one cause. To control, statistically, for all possible causes social scientists employ multinomial regression analysis.\nThe multivariate regression model is the following:\n\\[Y_{i}=\\alpha+\\beta_{1}X_{i}+ \\beta_{2}Z_{i}+ u_{i}\\]\nThe interpretation of the slope coefficients for the multivariate- in this case three variable model- is similar to the bivariate model but with one major difference. The coefficient \\[\\beta_{1}\\] represents the effect of X on Y while keeping Z (the third variable) constant. The same will hold if we had a model with four variables.\n"
},
{
	"uri": "/en/regression_analysis/regression-stargazer/",
	"title": "Professional outputs",
	"tags": [],
	"description": "",
	"content": "  library(ggplot2) library(sjlabelled) Democracy \u0026lt;- read_stata(\u0026quot;Democracy.dta\u0026quot;) GDP_Dem\u0026lt;- subset(Democracy, select = c(\u0026quot;Dem_Gov1984\u0026quot;, \u0026quot;GDPPC1984\u0026quot;)) # we subset the dataset called \u0026quot;Democracy\u0026quot; head(GDP_Dem) model.1 \u0026lt;- lm(Dem_Gov1984~GDPPC1984, data=GDP_Dem) summary(model.1) R can make complicated things easy and the package below will save you a lot of time. In your assignments you should have tables similar to the ones you see in official reports and journal publications. The stargazer package will allow to do this without having to update your table multiple times.\nlibrary(stargazer) stargazer(model.1, type=\u0026quot;html\u0026quot;, out=\u0026quot;model_one.doc\u0026quot;) Note: If you are using LATEX instead of Word you don’t have to specify the type and the output (out).\n"
},
{
	"uri": "/en/multivariate_regression/prepare-data/",
	"title": "Prepare your variables",
	"tags": [],
	"description": "",
	"content": "  As always, start by opening a new script file, give your file a “good name” and save it in our folder (POL2045). Remove everything from RStudio’s memory and set your working directory\nrm(list=ls()) setwd(\u0026quot;~POLXXXX\u0026quot;) # Remember XXXXis the code of your module The dplyr package Although many data manipulation function exist in basic R sometimes it is easier to use packages build for the sole purpose of making data manipulation easier. dplyr is such a package (https://dplyr.tidyverse.org/)\ndplyr is providing a consistent set of verbs that help you solve the most common data manipulation challenges:\nmutate( ) : adds new variables that are functions of existing variables\nselect( ) : picks variables based on their names\nfilter( ) : picks cases based on their values\narrange( ) : changes the ordering of the rows\nsummarise( ) : reduces multiple values down to a single summary\nlibrary(dplyr) The %\u0026gt;% operator Although not required dplyr make use of the pipe operator %\u0026gt;%. The main value of the pipe operator is the ability to connect multiple functions together. To give you an example:\n filter(my_data, my_variable == variable_value)\nor\nmy_data %\u0026gt;% filter(my_variable == variable_value)\n If you use RStudio, you can type the pipe ([%\u0026gt;%]) with Ctrl + Shift + Mif you have a PCor Cmd + Shift + Mif you have a Mac.\n We will use the European Value Survey (EVS) which includes a series of continuous and categorical variables.\n The select( ) function select () will keep only those variables in the dataset you are interested in. Sometimes, especially when we re working with big datasets we want to reduce the number of variables.\nIn our seminar we will work again with the European Value Study (2019). As you already know the dataset contains many variables.Our goal is to explore what predicts attitudes towards immigration. The exact wording of the question is the following:\n Please look at the following statements and indicate where you would place your views on this scale? (scale of 1 to 10)\nWhere 1 means that immigrants take jobs away from [Nationality] and 10 that immigrants DO NOT take jobs away from [Nationality].  load(\u0026quot;EVS_UK_full.RData\u0026quot;) library(dplyr) Our dependent variable is attitudes towards immigration (v185), our main idependent variables are: self-placement on the left-right spectrum (v102), attitudes towards nationality (v189,v190, v191, v192, v193), and finally three control variables namely age (v226), education (v243_edulvlb), and gender (v225). We also need the variable describing the name of the country in the dataset (country).\nsub.sample\u0026lt;-EVS_UK_full %\u0026gt;% select(v102, v185, v189,v190, v191, v192, v193, v225, v226,v243_edulvlb,country) head(sub.sample) EVS includes all European countries, for our excercise we want to analyse data examining attitudes towards immigration in GB. To exclude all other countries from our dataset we need a) to know the value of the variable that corresponds to Great Britain (country==826) b) to delete all other values of the country variable from our dataset. To do so we will use the filter () function.\nsub.sample %\u0026gt;% filter(country == 826)  Our next step is to let R know which values represent missing cases. According to the codebook all values ranging from -10 to -1 describe missing cases (Don’t know, No answer, not applicable)\nsub.sample[sub.sample \u0026lt;=-1] \u0026lt;- NA sub.sample[sub.sample \u0026lt;=-2] \u0026lt;- NA Our dependent variable is a continuous variable with a range from 1 to 10, where 1 means that the respondent hold anti-immigration attitudes (Immigrants take jobs) and 10 that the respondent doesn’t hold anti-immigration attitudes. When the large number, in our example (10), indicate lower agreement with the phenomenon under study, then we say that the variables are negatively coded. This is not really wrong but it makes more sense, is more intuitive, to reverse the order of the coding. It is the case that readers and researchers expect higher values to indicate higher levels of agreement with the phenomenon under study, in this case anti-immigration attitudes.\nUsing the arrange( ) function we can reverse the order of the code of the values. In our example what we want is instead of 10 representing positive attitudes towards immigration to represent negative ones.\nsub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(immi.jobs=(max(v185,na.rm=TRUE)-(v185))) Note: I used the na.rm=T function inside the max function max(). This is because otherwise due to NAs R cannot make the maths.\nTo make sure we did everything correctly we use the table () function to compare the two variables- before and after reversing the codes.\ntable(sub.sample$immi.jobs) table(sub.sample$v185) We should apply the same method to reverse the order of three more variables v189 to v193.\nsub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(born.country=(max(v189,na.rm=TRUE)-(v189))) sub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(respect.inst=(max(v190,na.rm=TRUE)-(v190))) sub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(country.ancestry=(max(v191,na.rm=TRUE)-(v191))) sub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(speak.lang=(max(v192,na.rm=TRUE)-(v192))) sub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(share.cultr=(max(v193,na.rm=TRUE)-(v193))) head(sub.sample) Our next step is to create the age variable, we know the year of birth and that the survey administrated in 2017. To calculate the responder’s name when the survey took place we substract respondents year of birth from the year the survey took place (2017- year of birth).\nsub.sample\u0026lt;-sub.sample %\u0026gt;% mutate(age=2017-v226) table(sub.sample$age) Our last step is to use the rename( )function, part of dplyr to give meaningful names to our variables.\nsub.sample\u0026lt;-sub.sample %\u0026gt;% rename(education=v243_edulvlb, gender=v225, left_right=v102) head(sub.sample)   "
},
{
	"uri": "/en/multivariate_regression/models/",
	"title": "The model",
	"tags": [],
	"description": "",
	"content": "  We are now ready to conduct our analysis. We will use the lm() function.\nlibrary(lme4) model.1\u0026lt;-lm(immi.jobs~ born.country+respect.inst+country.ancestry+speak.lang+share.cultr+left_right+education+gender+age,data=sub.sample) summary(model.1) ## ## Call: ## lm(formula = immi.jobs ~ born.country + respect.inst + country.ancestry + ## speak.lang + share.cultr + left_right + education + gender + ## age, data = sub.sample) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.1341 -1.6810 -0.1593 1.6917 7.8835 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.2363291 0.4307600 2.870 0.004157 ** ## born.country 0.5846284 0.0780512 7.490 1.13e-13 *** ## respect.inst -0.0589700 0.1056487 -0.558 0.576805 ## country.ancestry 0.4367903 0.0854104 5.114 3.53e-07 *** ## speak.lang 0.3575283 0.1150266 3.108 0.001915 ** ## share.cultr 0.3870998 0.1052285 3.679 0.000242 *** ## left_right 0.0354641 0.0313352 1.132 0.257901 ## education -0.0017546 0.0002726 -6.436 1.62e-10 *** ## gender -0.3156420 0.1180030 -2.675 0.007551 ** ## age 0.0014324 0.0036699 0.390 0.696364 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.355 on 1614 degrees of freedom ## (164 observations deleted due to missingness) ## Multiple R-squared: 0.2354, Adjusted R-squared: 0.2311 ## F-statistic: 55.21 on 9 and 1614 DF, p-value: \u0026lt; 2.2e-16 library(dotwhisker) dwplot(list(model.1), vline = geom_vline(xintercept = 0, colour = \u0026quot;grey60\u0026quot;, linetype = 2)) %\u0026gt;% # plot line at zero _behind_ coefs relabel_predictors(c(immi.jobs = \u0026quot;Immigrants take jobs\u0026quot;, born.country = \u0026quot;Born in country\u0026quot;, respect.inst = \u0026quot;Respect institutions\u0026quot;, country.ancestry = \u0026quot;Country ancestry\u0026quot;, speak.lang = \u0026quot;Speak language\u0026quot;, share.cultr = \u0026quot;Share culture\u0026quot;, left_right=\u0026quot;Left-Right\u0026quot;, education=\u0026quot;Education\u0026quot;, gender=\u0026quot;Gender\u0026quot;, age=\u0026quot;Age\u0026quot;)) + theme_classic() + xlab(\u0026quot;Coefficient Estimate\u0026quot;) + ylab(\u0026quot;\u0026quot;) + geom_vline(xintercept = 0, colour = \u0026quot;grey60\u0026quot;, linetype = 2) + ggtitle(\u0026quot;Predicting anti-immigration attitudes\u0026quot;) + theme(plot.title = element_text(face=\u0026quot;bold\u0026quot;), legend.position = c(0.01, 0.03), legend.justification = c(0, 0), legend.background = element_rect(colour=\u0026quot;grey80\u0026quot;), legend.title = element_blank())  From our analysis we can see that three of our variables are not statistically significant, namely age, respect towards institutions, and left-right. Let’s construct another model but this time we will exclude the three variables that are not statistically significant.\nmodel.2\u0026lt;-lm(immi.jobs~ born.country+country.ancestry+speak.lang+share.cultr+education+gender,data=sub.sample) summary(model.2) ## ## Call: ## lm(formula = immi.jobs ~ born.country + country.ancestry + speak.lang + ## share.cultr + education + gender, data = sub.sample) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.2424 -1.7014 -0.1612 1.7130 7.7064 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.274658 0.356722 3.573 0.000362 *** ## born.country 0.581489 0.075558 7.696 2.34e-14 *** ## country.ancestry 0.502525 0.082420 6.097 1.33e-09 *** ## speak.lang 0.350976 0.109172 3.215 0.001329 ** ## share.cultr 0.381239 0.098778 3.860 0.000118 *** ## education -0.001789 0.000258 -6.932 5.80e-12 *** ## gender -0.278855 0.114744 -2.430 0.015189 * ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.377 on 1742 degrees of freedom ## (39 observations deleted due to missingness) ## Multiple R-squared: 0.2364, Adjusted R-squared: 0.2338 ## F-statistic: 89.88 on 6 and 1742 DF, p-value: \u0026lt; 2.2e-16 We can now plot both models and compare the results.\ndwplot(list(model.1, model.2), vline = geom_vline(xintercept = 0, colour = \u0026quot;grey60\u0026quot;, linetype = 2)) %\u0026gt;% # plot line at zero _behind_ coefs relabel_predictors(c(immi.jobs = \u0026quot;Immigrants take jobs\u0026quot;, born.country = \u0026quot;Born in country\u0026quot;, respect.inst = \u0026quot;Respect institutions\u0026quot;, country.ancestry = \u0026quot;Country ancestry\u0026quot;, speak.lang = \u0026quot;Speak language\u0026quot;, share.cultr = \u0026quot;Share culture\u0026quot;, left_right=\u0026quot;Left-Right\u0026quot;, education=\u0026quot;Education\u0026quot;, gender=\u0026quot;Gender\u0026quot;, age=\u0026quot;Age\u0026quot;)) + theme_classic() + xlab(\u0026quot;Coefficient Estimate\u0026quot;) + ylab(\u0026quot;\u0026quot;) + geom_vline(xintercept = 0, colour = \u0026quot;grey60\u0026quot;, linetype = 2) + ggtitle(\u0026quot;Predicting anti-immigration attitudes\u0026quot;) + theme(plot.title = element_text(face=\u0026quot;bold\u0026quot;), legend.position = c(0.01, 0.03), legend.justification = c(0, 0), legend.background = element_rect(colour=\u0026quot;grey80\u0026quot;), legend.title = element_blank())  "
},
{
	"uri": "/en/binary_regression/",
	"title": "Binary regression analysis",
	"tags": [],
	"description": "",
	"content": "In this section we will learn how to run a binary regression analysis with more than one independent variables. The binary regression model estimates a relationship between one or more explanatory variables and a single output binary variable.\n"
},
{
	"uri": "/en/binary_regression/prepare-data_binary/",
	"title": "Prepare your dataset",
	"tags": [],
	"description": "",
	"content": "  For this section we will be using data from the ‘British Election Study’ survey to investigate the effect of perceptions about the economy on party choice. This is part of a broader research examining the effect of political issues on party choice and especialy on the effect of the economy on the party in government.\nLewis-Beck, Michael S., and Martin Paldam. “Economic voting: an introduction.” Electoral studies 19.2-3 (2000): 113-121.\nload(\u0026quot;bes.RData\u0026quot;) We will analyse data from the 2017 general election, and we will test whether citizens’ who feel that the economy is doing better will support the party in government.\nWe can download the full dataset from the website below:\nBritish Election Study\nWe should download the post-election study entitled: 2017 Face-to-face Post-election Survey Version 1.3\nWe will use the following variables from the dataset:\n    Name Description (name in the dataset in parenthesis)    incumbent (1) The respondent will vote for the party in government (0) will vote for another party (b02)  left-right position on the left- right spectrum (e01)  egocentric_retro retrospective evaluation of personal finances (l01)  egocentric_pros prospective evaluation of personal finances (l02)  sociotropic_retro retrospective evaluation of UK’s economy (l04)  sociotropic_pros prospective evaluation of UK’s economy (l03)    Create a subset Our next step is to create a sub-set including only the variables we will include in our analysis\nlibrary(dplyr) eco_voting\u0026lt;-bes %\u0026gt;%select(b02,Age,edlevel,e01,l01,l02,l03,l04,p01) View(eco_voting) Note: If you use RStudio, you can type the pipe (\\(%\u0026gt;%\\)) with Ctrl + Shift + M if you have a PC or Cmd + Shift + M if you have a Mac.\n Assign missing cases Our next step is to replace the negative values (-1, -2) to NAs\neco_voting[eco_voting \u0026lt;=-1] \u0026lt;- NA eco_voting[eco_voting \u0026lt;=-2] \u0026lt;- NA  Rename your independent variables We will use the rename() function which is part dplyr:\neco_voting\u0026lt;-eco_voting %\u0026gt;% rename(left_right=e01, egocentric_retro=l01,egocentric_pros=l02,sociotropic_pros=l03,sociotropic_retro=l04,brexit=p01) View(eco_voting)  "
},
{
	"uri": "/en/binary_regression/prepare-dependent_variable/",
	"title": "Create your dependent variable",
	"tags": [],
	"description": "",
	"content": "  Create the dependent variable Our dependent variable is a dichotomous, dummy variable where \\(1\\) means that the respondent voted for the party in government - this is what we are trying to explain- and \\(0\\) means that they voted for another party.\neco_voting\u0026lt;-eco_voting %\u0026gt;% mutate(incumbent=case_when(b02==2~1, b02==1~0, b02\u0026gt;=3~0))  You may use the table() function to double check the new variable entitled `incumbent’:\ntable(eco_voting$b02) ## ## 0 1 2 3 4 5 6 7 ## 2 457 347 48 49 1 19 21 table(eco_voting$incumbent) ## ## 0 1 ## 595 347  "
},
{
	"uri": "/en/binary_regression/models/",
	"title": "The logistic regression model",
	"tags": [],
	"description": "",
	"content": "  Logistic Regression Model We will use the generalized linear model function glm() to estimate a logistic regression-remember that we have a dummy dependent variable. The function is very similar to the lm() function- the only difference is that there is an additional argument called family(). The family() function will tell R that we want to estimate a logistic regression.\nLet’s see it in practice, all we have to do is to include the following line in the glm() function:\nfamily = binomial(link = \u0026quot;logit\u0026quot;) argument logit.model\u0026lt;-glm(incumbent~ sociotropic_pros+egocentric_retro+left_right, data=eco_voting,family = binomial(link = \u0026quot;logit\u0026quot;)) summary(logit.model) ## ## Call: ## glm(formula = incumbent ~ sociotropic_pros + egocentric_retro + ## left_right, family = binomial(link = \u0026quot;logit\u0026quot;), data = eco_voting) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.7153 -0.7594 -0.3541 0.7221 2.9429 ## ## Coefficients: ## Estimate Std. Error z value Pr(\u0026gt;|z|) ## (Intercept) -5.88946 0.49714 -11.847 \u0026lt; 2e-16 *** ## sociotropic_pros 0.29030 0.10063 2.885 0.00392 ** ## egocentric_retro 0.23379 0.10793 2.166 0.03030 * ## left_right 0.79782 0.06612 12.067 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 1042.32 on 793 degrees of freedom ## Residual deviance: 742.53 on 790 degrees of freedom ## (479 observations deleted due to missingness) ## AIC: 750.53 ## ## Number of Fisher Scoring iterations: 5 Interpreting the results of a logistic regression model is not the same as the interpretation of the linear model. Remember that for the linear model the coefficient describe the effect of a unit change (increase or decrease) in X on Y.\nFor the logistic regression the interpretation of the coefficient is: a one unit change (increase or decrease) in X is associated with a \\(\\hat{\\beta}\\) change in the log-odds of the dependent variable (Y), holding all other variables constant.\nFor example, the coefficient describing perceptions about the economy sociotropic_pros is equal to \\(0.047\\), implying that the log-odds of voting for the party in government are \\(0.047\\) higher when the respondent believe that the economy is doing well, holding all other variables constant.\n "
},
{
	"uri": "/en/interaction_term/",
	"title": "Interaction Terms",
	"tags": [],
	"description": "",
	"content": "Interaction term: A new variable that represents an interaction between two variables. These two variables forming that interaction term, interact to affect the dependent variable.\n"
},
{
	"uri": "/en/binary_regression/predicted_probabilities/",
	"title": "Predicted probabilities",
	"tags": [],
	"description": "",
	"content": "  Predicted probabilities As you may have already realised, log-odds are not straight-forward. This is why we use the predict() function which give us predictions for Y, the dependent variable.\nprobabilities\u0026lt;-predict(logit.model,type = \u0026quot;response\u0026quot;)  The effects package The final section include’s the use of the effects package developed by Fox, et al. The effects package creates plots for various statistical models. In this example I will show you how it works with a logistic model- but it works with linear models, mixed effects models and many other.\nFirst you have to install the effects package. The easiest way to visualise your model is by using the allEffects() function in combination with the plot() function.\nlibrary(effects) plot(allEffects(logit.model)) References\nFox, J. (2003) Effect displays in R for generalised linear models. Journal of Statistical Software 8:15, 1–27, http://www.jstatsoft.org/v08/i15/.\n "
},
{
	"uri": "/en/interaction_term/prepare-data_interaction/",
	"title": "Prepare your variables",
	"tags": [],
	"description": "",
	"content": "  For this section we will use the same model as for the multivariate regression analysis. Our dependent variable is attitudes towards immigration immi.jobs.\nLet’s upload our dataset\nlibrary(sjlabelled) EVS \u0026lt;- read_stata(\u0026quot;ZA7500_v2-0-0.dta\u0026quot;) Our next step is to keep only the variables we are interesting in:\nSince we are only interested in Germany we should exclude all other countries from the analysis:\nlibrary(dplyr) EVS.Germany\u0026lt;-EVS %\u0026gt;% filter(country == 276) table(EVS.Germany$country) ## ## 276 ## 5407 Let’s exclude the missing cases:\nEVS.Germany[EVS.Germany \u0026lt;=-1] \u0026lt;- NA EVS.Germany[EVS.Germany \u0026lt;=-2] \u0026lt;- NA Our next step is to give meaningful names to our variables while we are arrange the order of the values (if and when necessary):\nEVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% mutate(immi.jobs=(max(v185,na.rm=TRUE)-(v185))) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% mutate(born.country=(max(v189,na.rm=TRUE)-(v189))) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% mutate(respect.inst=(max(v190,na.rm=TRUE)-(v190))) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% mutate(country.ancestry=(max(v191,na.rm=TRUE)-(v191))) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% mutate(speak.lang=(max(v192,na.rm=TRUE)-(v192))) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% mutate(share.cultr=(max(v193,na.rm=TRUE)-(v193))) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% rename(education=v243_edulvlb) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% rename(left_right=v102) EVS.Germany\u0026lt;-EVS.Germany %\u0026gt;% rename(region=v275c_N1) Next step is to create the variable measuring whether the respondent lived in Eastern or Western Germany. You may consult the Codebook to identify the 5 regions that used to belong to Eastern Germany.\ntable(EVS.Germany$region) ## ## 27601 27602 27603 27604 27605 27606 27607 27608 27609 27610 27611 27612 27613 ## 682 908 223 184 35 84 428 133 545 1079 262 60 320 ## 27614 27615 27616 ## 139 176 149 EVS.Germany$east_west \u0026lt;- NA EVS.Germany$east_west[EVS.Germany$region==27604] \u0026lt;- 1 EVS.Germany$east_west[EVS.Germany$region==27608] \u0026lt;- 1 EVS.Germany$east_west[EVS.Germany$region==27613] \u0026lt;- 1 EVS.Germany$east_west[EVS.Germany$region==27614] \u0026lt;- 1 EVS.Germany$east_west[EVS.Germany$region==27616] \u0026lt;- 1 EVS.Germany$east_west[EVS.Germany$region==27603] \u0026lt;- 0 EVS.Germany$east_west[EVS.Germany$region==27607] \u0026lt;- 0 EVS.Germany$east_west[EVS.Germany$region==27609] \u0026lt;- 0 EVS.Germany$east_west[EVS.Germany$region==27610] \u0026lt;- 0 EVS.Germany$east_west[EVS.Germany$region==27611] \u0026lt;- 0 EVS.Germany$east_west[EVS.Germany$region==27612] \u0026lt;- 0 EVS.Germany$east_west[EVS.Germany$region==27615] \u0026lt;- 0 table(EVS.Germany$east_west) ## ## 0 1 ## 2773 925 "
},
{
	"uri": "/en/interaction_term/prepare-interaction_term/",
	"title": "Construct and plot your interaction term",
	"tags": [],
	"description": "",
	"content": "  The \\(:\\) designates the interaction between two variables. The operator \\(*\\) designates the interaction between the two variables, plus the main effects. In our model we included an interaction term between two variables born.country and east_west.\nmodel.1\u0026lt;-lm(immi.jobs~ born.country*east_west+country.ancestry+share.cultr+left_right+education,data=EVS.Germany) summary(model.1) ## ## Call: ## lm(formula = immi.jobs ~ born.country * east_west + country.ancestry + ## share.cultr + left_right + education, data = EVS.Germany) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.2222 -1.6097 -0.4451 1.4351 7.6519 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 0.7978867 0.2726768 2.926 0.00348 ** ## born.country 0.4542258 0.0891563 5.095 3.92e-07 *** ## east_west 0.7637056 0.2591249 2.947 0.00325 ** ## country.ancestry 0.2614679 0.0919001 2.845 0.00450 ** ## share.cultr 0.3965076 0.0850157 4.664 3.37e-06 *** ## left_right 0.1654872 0.0338321 4.891 1.11e-06 *** ## education -0.0017670 0.0003333 -5.301 1.32e-07 *** ## born.country:east_west -0.2885010 0.1428949 -2.019 0.04366 * ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.279 on 1544 degrees of freedom ## (3855 observations deleted due to missingness) ## Multiple R-squared: 0.1577, Adjusted R-squared: 0.1539 ## F-statistic: 41.3 on 7 and 1544 DF, p-value: \u0026lt; 2.2e-16 It is important to plot the outcome of the interaction term. To do so you may use the interplot() package.\nlibrary(interplot) interaction\u0026lt;-interplot(m = model.1, var1 = \u0026quot;born.country\u0026quot;, var2 = \u0026quot;east_west\u0026quot;) + theme_classic() + theme(plot.title = element_text(hjust = 0.5))+ # This will center the title of your plot geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) + ggtitle(\u0026quot;Marginal Effects: East versus West\u0026quot;) interaction "
},
{
	"uri": "/en/about/",
	"title": "Additional resources",
	"tags": [],
	"description": "",
	"content": "  Here you may find some great resources for learning R Swirl\nSwirl, and interactive tutorial. It is an installable package that will run through RStudio.\nCookbook for R \nA very useful online tutorial, especially when it comes to graphs\nQuick-R\nAnother very useful website, here you will find clear and to the point instructions on how to create new variables, recode the values of existing ones, assign missing cases etc.\nR-Ladies\nThose are the ones I use, including R-Ladies, a group aiming to promote gender diversity in the R community.\n "
},
{
	"uri": "/en/showcase/",
	"title": "Additional resources",
	"tags": [],
	"description": "",
	"content": "Here you may find some great resources for learning R Swirl\nSwirl, and interactive tutorial. It is an installable package that will run through RStudio.\n**Cookbook for R **\nA very useful online tutorial, especially when it comes to graphs\nQuick-R\nAnother very useful website, here you will find clear and to the point instructions on how to create new variables, recode the values of existing ones, assign missing cases etc.\nR-Ladies\nThose are the ones I use, including R-Ladies, a group aiming to promote gender diversity in the R community.\n"
},
{
	"uri": "/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/en/bivariate/correlation/",
	"title": "Correlation",
	"tags": [],
	"description": "",
	"content": "  If we want to examine the relationship between two continuous variables then calculate the correlation coefficient commonly known as Pearson’s r. The correlation coefficient ranges from \\(-1\\) to \\(1\\) where \\(-1\\) indicates a perfect negative relationship between the two variables and \\(1\\) a perfect positive relationship. We calculate the correlation coefficient by using the cor() function.\nFor example, load the EVS_UK dataset. We will examine the relationship between peoples’ attitudes towards EU (v198) and attitudes towards immigration (v185). The interpretation of the results depends upon the direction of the values. In our case our two continuous variables range from \\(0\\) to \\(10\\), for v198 \\(0\\) means that the responder is against the enlargement of the EU and 10 in favour. For v185, \\(0\\) means that the responder believe that immigrants do not take away jobs while \\(10\\) means that they do take jobs away.\nload(\u0026quot;EVS_UK.RData\u0026quot;) cor(y=EVS_UK$v198, x=EVS_UK$v185, use=\u0026quot;complete.obs\u0026quot;) ## [1] -0.2465359 Our coefficient is equal to \\(-0.24\\), the \\(-\\) sign indicates that there is a negative correlation between the two variables. A negative correlation means that there is an inverse relationship between two variables - when one variable decreases, the other increases. In other words, higher values of one variable tend to be associated with lower values of the second variable.\nThe opposite is a positive correlation, when one variable decreases as the other variable decreases, or one variable increases while the other increases.\nYou may visualise the relationship between two variables by creating a correlogram:\nWe start by creating a subset of our dataset, our subset will include the two variables we are interested in, v198 and v185, and few more variables measuring attitudes towards immigration v184, v186, and v187.\nevs_subset \u0026lt;- c(\u0026quot;v198\u0026quot;, \u0026quot;v184\u0026quot;, \u0026quot;v185\u0026quot;, \u0026quot;v186\u0026quot;, \u0026quot;v187\u0026quot;) euimmi.sample \u0026lt;- EVS_UK[evs_subset] View(euimmi.sample) let’s confirm that all of our variables are numeric i.e. continuous\nclass(EVS_UK$v198) ## [1] \u0026quot;haven_labelled\u0026quot; class(EVS_UK$v185) ## [1] \u0026quot;haven_labelled\u0026quot; class(EVS_UK$v186) ## [1] \u0026quot;haven_labelled\u0026quot; class(EVS_UK$v187) ## [1] \u0026quot;haven_labelled\u0026quot; EVS_UK$v198\u0026lt;-as.numeric(EVS_UK$v198) EVS_UK$v185\u0026lt;-as.numeric(EVS_UK$v185) EVS_UK$v186\u0026lt;-as.numeric(EVS_UK$v186) EVS_UK$v187\u0026lt;-as.numeric(EVS_UK$v187) Visualising correlations Don’t forget to install the package we will use by using the install.packages() function: install.packages(\"corrgram\")\nlibrary(corrgram) corrgram(euimmi.sample, order=NULL, lower.panel=panel.shade, upper.panel=NULL, text.panel=panel.txt, main=\u0026quot;EU enlargement and attitudes \\n towards immigration\u0026quot;)  "
},
{
	"uri": "/en/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Contributors Thanks to them for making Open Source Software a better place !\nAnd a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.\nPackages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo  "
},
{
	"uri": "/en/",
	"title": "Introduction to Quantitative Research Methods",
	"tags": [],
	"description": "",
	"content": "Welcome to Quantitative research methods! This module will introduce you to concepts and techniques essential to the analysis of political issues using quantitative methods. This module provides an introduction to quantitative analysis and the ways in which these tools are applied to politics.\nTogether we will cover topics related to statistical inference; hypothesis testing; bivariate and multivariate regression analysis, and interaction terms among others.\nThis course will also provide you the opportunity to become proficient in the use of cutting edge computer software widely used in analysing quantitative data.\nStart by revising some of the main concepts you learn last semester such as research question, research hypothesis, variables, surveys, experiments.\n "
},
{
	"uri": "/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]