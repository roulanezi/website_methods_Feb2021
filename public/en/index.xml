<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Quantitative Research Methods on Documentation for Hugo Learn Theme</title>
    <link>/en/</link>
    <description>Recent content in Introduction to Quantitative Research Methods on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Where to find data</title>
      <link>/en/descriptive_statistics/find.data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/descriptive_statistics/find.data/</guid>
      <description>When we are starting a new research project, quite often we assume that we need to collect data. However, this is not always required as there are many good quality datasets that are readily available for use. Most surveys are designed by very experienced researchers and cover a wide range of topics.
For example, GESIS-Leibniz Institute of the Social Sciences,houses almost all comparative and German social surveys in Europe. Almost all European countries have a data archive.</description>
    </item>
    
    <item>
      <title>Explore your dataset</title>
      <link>/en/descriptive_statistics/explore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/descriptive_statistics/explore/</guid>
      <description>Start by creating a folder dedicated to our module. On your computer go to My Documents and create a new folder entitled POLXXXX (XXXX indicates the code of our module). Go back to SurreyLearn and download the dataset in the folder. Go back to RStudio, create a new script file, name it Lab1.R.
The first two lines of your script file should include the following three lines.
rm(list = ls()) # This command will clean your workspace setwd(&amp;quot;~/POLXXXX&amp;quot;) # This command will tell RStudio to read and save files at the folder POLXXXX load(&amp;quot;EVS_UK.</description>
    </item>
    
    <item>
      <title>The mean and the median</title>
      <link>/en/descriptive_statistics/mean.median/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/descriptive_statistics/mean.median/</guid>
      <description>The arithmetic mean, in other words the average, is the most commonly used measure of central tendency. Even without realising it we often calculate the mean, for example we use the mean to calculate how much energy we are using per month.
We all know how to calculate the mean, by diving the sum of all observations by the total number of observations. Let’s try to do that in R.</description>
    </item>
    
    <item>
      <title>The mode</title>
      <link>/en/descriptive_statistics/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/descriptive_statistics/mode/</guid>
      <description>In contrast to the other two measures of central tendency we don’t need a build-in function to calculate the mode. Simply because it is very easy to do it on our own. Think what the mode is…
To find the value that appears most often, all we have to do is to tabulate the variable we are interested in. This is easily done with the table() function.
dem_mode&amp;lt;-table(EVS_UK$v142) dem_mode ## ## 1 2 3 4 5 6 7 8 9 10 ## 24 8 11 15 90 66 84 212 223 1031 In simple words the table() function creates a table that tell us the number of people (cases) that fall into each category.</description>
    </item>
    
    <item>
      <title>Measures of dispersion</title>
      <link>/en/descriptive_statistics/dispretion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/descriptive_statistics/dispretion/</guid>
      <description>The range of a variable is the simplest and easiest measure of dispersion we can calculate, but at the same time is the less reliable one, this is because it depends only upon two values- the two extremes- that quite often are also outliers and are far away from the centre of the distribution.
The variance is a measure that takes into consideration how far is each value from the mean.</description>
    </item>
    
    <item>
      <title>An illustration</title>
      <link>/en/clm/central_limit_theorem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/clm/central_limit_theorem/</guid>
      <description>Learning Objectives By the end of this section be able to:
 Apply the Central Limit Theorem on asample in R, Generate a random sample from a given dataset, Identify if a distribution is skewed or not using a histogram  You now know what the Central Limit Theorem is and why it is so important. You ’ve been recently introduced to RStudio and you are very good at it!</description>
    </item>
    
    <item>
      <title>Categorical variables</title>
      <link>/en/descriptive_statistics/dispretion.factor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/descriptive_statistics/dispretion.factor/</guid>
      <description>Some variables, consist of named categories, e.g. the name of your favourite brand. A category-variable, or a categorical variable refers to any variable that puts individuals into categories. These variables are also called nominal variables. The word nominal comes from Latin (nominalis=of a name), because we are giving names to the values of our variable.
With categorical variables we want to understand the frequency with which each value appears in our dataset.</description>
    </item>
    
    <item>
      <title>T-test</title>
      <link>/en/bivariate/ttest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/bivariate/ttest/</guid>
      <description>This time we will use a dataset named midwest.
Download the dataset from SurreyLearn and load it into RStudio. To load our file we use the load() function. Give a name to your dataset using the assigment operator &amp;lt;-.
Let’s have a look at the dataset. Alternatively, you can have a look at the codebook- that is the document that comes with the dataset. The codebook describes the contents, structure, and layout of a data collection but it also provides a detailed overview of all variables included in the dataset.</description>
    </item>
    
    <item>
      <title>The ggplot package</title>
      <link>/en/graphs/ggplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/graphs/ggplot/</guid>
      <description>Learning Objectives By the end of this section you will:
 Learn the basic concepts associated the grammar of graphics such as aesthetic mapping. Be introduced to some initial steps to preparing your data for plotting graphs.   The ggplot package The most common data visualisation package in RStudio is ggplot. We may install ggplot by using the install.packages() function. We write install.packages(&#34;ggplot2&#34;) and we call the package by using the library() function.</description>
    </item>
    
    <item>
      <title>Graphs-categorical variables</title>
      <link>/en/graphs/graphs_categorical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/graphs/graphs_categorical/</guid>
      <description>Learning Objectives By the end of this section you should be able to:
 Understand and use aesthetic mapping within ggplot2 Plot a barplot using categorical data Make adjustments to the theme and legend of you barplot  Below you will find some examples of graphs for categorical variables. Of course there are many more graphs available to help you visualise your hypothesis and research question.
 Bar Plots Let’s use this minimal example to see how ggplot works.</description>
    </item>
    
    <item>
      <title>Graphs-continuous variables</title>
      <link>/en/graphs/graphs_continuous/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/graphs/graphs_continuous/</guid>
      <description>Learning Objectives By the end of this section you should be able to:
 Understand how to plot continuous variables Use boxplots, line plots , violin plots and 3D plots for continuous variables   One continuous variable For the following example we will use a variable describing citizens’ satisfaction with the political system, the name of the variable is v144. We will use the names() function to give a meaningful name to the variable.</description>
    </item>
    
    <item>
      <title>Graphs-ordinal variables</title>
      <link>/en/graphs/graphs_ordinal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/graphs/graphs_ordinal/</guid>
      <description>Learning Objectives By the end of this section you should be able to:
 Plot ordinal variables using ggplot2 Change or adjust the labels of a variable Use the density plot to represent ordinal variables.  In this section we will use two variables describing anti-immigration attitudes, the first one is called v184 and is asking respondents to agree or diagree with the following statement “Immigrants take away jobs”.</description>
    </item>
    
    <item>
      <title>Introduction to regression analysis</title>
      <link>/en/regression_analysis/regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/regression_analysis/regression/</guid>
      <description>As always, start by opening a new script file, give to your file a “good name” and save it in our folder (POLXXXX). Remove everything from RStudio’s memory and set your working directory
Today we will learn how to produce a regression model, to do so, we will use a dataset produced by Pippa Norris. The dataset is called “DEMOCRACY CROSS-NATIONAL DATA”, and you may find it on our module’s website on SurreyLearn.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>/en/graphs/faq_ggplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/graphs/faq_ggplot/</guid>
      <description>Why can’t I see my graph? One common reason why your graph may not be displaying is that you may have not typed the name of your graph and run it.
 R cannot find the variable I would like to plot. There are a two common reasons why R might not be able to find your variable. Check that you have spelt the name exactly as it appears in the dataset (remember that you can use the codebook to check variable names and descriptions to do this)</description>
    </item>
    
    <item>
      <title>Interpreting the regression output</title>
      <link>/en/regression_analysis/regression-interpretation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/regression_analysis/regression-interpretation/</guid>
      <description>Let’s start by having a look at the formula:
lm(formula = Dem_Gov1984 ~ GDPPC1984, data = GDP_Dem)  Dem_Gov1984 : is our dependent variable  GDPPC1984  : is our independent variable
Residuals: ## Min 1Q Median 3Q Max ## -104.470 -16.507 -6.817 16.879 53.869   Residuals : The difference between the observed values and the predicted values of GDPPC1984.
Coefficients: Estimate Std. Error t value Pr(&amp;gt;|t|) (Intercept) 1.</description>
    </item>
    
    <item>
      <title>Visualising the relationship</title>
      <link>/en/regression_analysis/regression-graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/regression_analysis/regression-graphs/</guid>
      <description>Let’s plot the elationship between the two variables, dependent and independent, but this time we will include the regression line.
plot.2&amp;lt;-ggplot(GDP_Dem, aes(x=GDPPC1984, y=Dem_Gov1984)) +geom_point(size=3) + stat_smooth(method = &amp;quot;lm&amp;quot;, col = &amp;quot;red&amp;quot;)+ theme_classic()+ scale_x_continuous(breaks = seq(0, 75000, by = 5000))+ scale_y_continuous(breaks = seq(0, 200, by = 10))+ labs(x=&amp;quot;Democratic Governance&amp;quot;, y=&amp;quot;GDP Per Capita&amp;quot;) plot.2 The graph replicates the table, when our independent variable is equal to zero, then the starting point of the line (the Y axis) is predicted to be approximately 20, the same as in our table (19.</description>
    </item>
    
    <item>
      <title>Professional outputs</title>
      <link>/en/regression_analysis/regression-stargazer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/regression_analysis/regression-stargazer/</guid>
      <description>library(ggplot2) library(sjlabelled) Democracy &amp;lt;- read_stata(&amp;quot;Democracy.dta&amp;quot;) GDP_Dem&amp;lt;- subset(Democracy, select = c(&amp;quot;Dem_Gov1984&amp;quot;, &amp;quot;GDPPC1984&amp;quot;)) # we subset the dataset called &amp;quot;Democracy&amp;quot; head(GDP_Dem) model.1 &amp;lt;- lm(Dem_Gov1984~GDPPC1984, data=GDP_Dem) summary(model.1) R can make complicated things easy and the package below will save you a lot of time. In your assignments you should have tables similar to the ones you see in official reports and journal publications. The stargazer package will allow to do this without having to update your table multiple times.</description>
    </item>
    
    <item>
      <title>Prepare your variables</title>
      <link>/en/multivariate_regression/prepare-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/multivariate_regression/prepare-data/</guid>
      <description>As always, start by opening a new script file, give your file a “good name” and save it in our folder (POL2045). Remove everything from RStudio’s memory and set your working directory
rm(list=ls()) setwd(&amp;quot;~POLXXXX&amp;quot;) # Remember XXXXis the code of your module The dplyr package Although many data manipulation function exist in basic R sometimes it is easier to use packages build for the sole purpose of making data manipulation easier.</description>
    </item>
    
    <item>
      <title>The model</title>
      <link>/en/multivariate_regression/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/multivariate_regression/models/</guid>
      <description>We are now ready to conduct our analysis. We will use the lm() function.
library(lme4) model.1&amp;lt;-lm(immi.jobs~ born.country+respect.inst+country.ancestry+speak.lang+share.cultr+left_right+education+gender+age,data=sub.sample) summary(model.1) ## ## Call: ## lm(formula = immi.jobs ~ born.country + respect.inst + country.ancestry + ## speak.lang + share.cultr + left_right + education + gender + ## age, data = sub.sample) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.1341 -1.6810 -0.1593 1.6917 7.8835 ## ## Coefficients: ## Estimate Std.</description>
    </item>
    
    <item>
      <title>Prepare your dataset</title>
      <link>/en/binary_regression/prepare-data_binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/binary_regression/prepare-data_binary/</guid>
      <description>For this section we will be using data from the ‘British Election Study’ survey to investigate the effect of perceptions about the economy on party choice. This is part of a broader research examining the effect of political issues on party choice and especialy on the effect of the economy on the party in government.
Lewis-Beck, Michael S., and Martin Paldam. “Economic voting: an introduction.” Electoral studies 19.2-3 (2000): 113-121.</description>
    </item>
    
    <item>
      <title>Create your dependent variable</title>
      <link>/en/binary_regression/prepare-dependent_variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/binary_regression/prepare-dependent_variable/</guid>
      <description>  Create the dependent variable Our dependent variable is a dichotomous, dummy variable where \(1\) means that the respondent voted for the party in government - this is what we are trying to explain- and \(0\) means that they voted for another party.
eco_voting&amp;lt;-eco_voting %&amp;gt;% mutate(incumbent=case_when(b02==2~1, b02==1~0, b02&amp;gt;=3~0))  You may use the table() function to double check the new variable entitled `incumbent’:
table(eco_voting$b02) ## ## 0 1 2 3 4 5 6 7 ## 2 457 347 48 49 1 19 21 table(eco_voting$incumbent) ## ## 0 1 ## 595 347  </description>
    </item>
    
    <item>
      <title>The logistic regression model</title>
      <link>/en/binary_regression/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/binary_regression/models/</guid>
      <description>Logistic Regression Model We will use the generalized linear model function glm() to estimate a logistic regression-remember that we have a dummy dependent variable. The function is very similar to the lm() function- the only difference is that there is an additional argument called family(). The family() function will tell R that we want to estimate a logistic regression.
Let’s see it in practice, all we have to do is to include the following line in the glm() function:</description>
    </item>
    
    <item>
      <title>Predicted probabilities</title>
      <link>/en/binary_regression/predicted_probabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/binary_regression/predicted_probabilities/</guid>
      <description>Predicted probabilities As you may have already realised, log-odds are not straight-forward. This is why we use the predict() function which give us predictions for Y, the dependent variable.
probabilities&amp;lt;-predict(logit.model,type = &amp;quot;response&amp;quot;)  The effects package The final section include’s the use of the effects package developed by Fox, et al. The effects package creates plots for various statistical models. In this example I will show you how it works with a logistic model- but it works with linear models, mixed effects models and many other.</description>
    </item>
    
    <item>
      <title>Prepare your variables</title>
      <link>/en/interaction_term/prepare-data_interaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/interaction_term/prepare-data_interaction/</guid>
      <description>For this section we will use the same model as for the multivariate regression analysis. Our dependent variable is attitudes towards immigration immi.jobs.
Let’s upload our dataset
library(sjlabelled) EVS &amp;lt;- read_stata(&amp;quot;ZA7500_v2-0-0.dta&amp;quot;) Our next step is to keep only the variables we are interesting in:
Since we are only interested in Germany we should exclude all other countries from the analysis:
library(dplyr) EVS.Germany&amp;lt;-EVS %&amp;gt;% filter(country == 276) table(EVS.Germany$country) ## ## 276 ## 5407 Let’s exclude the missing cases:</description>
    </item>
    
    <item>
      <title>Construct and plot your interaction term</title>
      <link>/en/interaction_term/prepare-interaction_term/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/interaction_term/prepare-interaction_term/</guid>
      <description>The \(:\) designates the interaction between two variables. The operator \(*\) designates the interaction between the two variables, plus the main effects. In our model we included an interaction term between two variables born.country and east_west.
model.1&amp;lt;-lm(immi.jobs~ born.country*east_west+country.ancestry+share.cultr+left_right+education,data=EVS.Germany) summary(model.1) ## ## Call: ## lm(formula = immi.jobs ~ born.country * east_west + country.ancestry + ## share.cultr + left_right + education, data = EVS.Germany) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.</description>
    </item>
    
    <item>
      <title>Additional resources</title>
      <link>/en/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/about/</guid>
      <description>Here you may find some great resources for learning R Swirl
Swirl, and interactive tutorial. It is an installable package that will run through RStudio.
Cookbook for R 
A very useful online tutorial, especially when it comes to graphs
Quick-R
Another very useful website, here you will find clear and to the point instructions on how to create new variables, recode the values of existing ones, assign missing cases etc.</description>
    </item>
    
    <item>
      <title>Additional resources</title>
      <link>/en/showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/showcase/</guid>
      <description>Here you may find some great resources for learning R Swirl
Swirl, and interactive tutorial. It is an installable package that will run through RStudio.
**Cookbook for R **
A very useful online tutorial, especially when it comes to graphs
Quick-R
Another very useful website, here you will find clear and to the point instructions on how to create new variables, recode the values of existing ones, assign missing cases etc.</description>
    </item>
    
    <item>
      <title>Correlation</title>
      <link>/en/bivariate/correlation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/bivariate/correlation/</guid>
      <description>If we want to examine the relationship between two continuous variables then calculate the correlation coefficient commonly known as Pearson’s r. The correlation coefficient ranges from \(-1\) to \(1\) where \(-1\) indicates a perfect negative relationship between the two variables and \(1\) a perfect positive relationship. We calculate the correlation coefficient by using the cor() function.
For example, load the EVS_UK dataset. We will examine the relationship between peoples’ attitudes towards EU (v198) and attitudes towards immigration (v185).</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/en/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/credits/</guid>
      <description>Contributors Thanks to them for making Open Source Software a better place !
And a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.
Packages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; horsey - Progressive and customizable autocomplete component clipboard.</description>
    </item>
    
  </channel>
</rss>
